; WIP Last Changed Rev: 18135
;**************************************************************************************
; Copyright 2017 ON Semiconductor. All rights reserved.
; No permission to use, copy, modify, or distribute this software and/or
; its documentation for any purpose has been granted by ON Semiconductor.
; If any such permission has been granted ( by separate agreement ), it 
; is required that the above copyright notice appear in all copies and 
; that both that copyright notice and this permission notice appear in 
; supporting documentation, and that the name of ON Semiconductor or any
; of its trademarks may not be used in advertising or publicity pertaining
; to distribution of the software without specific, written prior permission.
;                                                                            
;                                                                            
;      This software and any associated documentation are provided "AS IS" and 
;      without warranty of any kind.   ON Semiconductor ExPRESSLY DISCLAIMS 
;      ALL WARRANTIES ExPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, NONINFRINGEMENT   
;      OF THIRD PARTY RIGHTS, AND ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS 
;      FOR A PARTICULAR PURPOSE.  ON Semiconductor DOES NOT WARRANT THAT THE FUNCTIONS CONTAINED  
;      IN THIS SOFTWARE WILL MEET YOUR REQUIREMENTS, OR THAT THE OPERATION OF THIS SOFTWARE  
;      WILL BE UNINTERRUPTED OR ERROR-FREE.  FURTHERMORE, ON Semiconductor DOES NOT WARRANT OR 
;      MAKE ANY REPRESENTATIONS REGARDING THE USE OR THE RESULTS OF THE USE OF ANY 
;      ACCOMPANYING DOCUMENTATION IN TERMS OF ITS CORRECTNESS, ACCURACY, RELIABILITY,
;      OR OTHERWISE.
;*************************************************************************************/ 
; Default INI file for XGS12M REV1 (Chip ID 0x0058)  
;                             
; $Revision: 55998 $       
; $Date: 2020-12-14 07:38:23 -0800 (Mon, 14 Dec 2020) $   
; 
; This file holds groups of register presets (sections) specific for this sensor. The 
; presets allow you to overwrite the power-on default settings with optimized register
; settings.    
; The [Demo Initialization] section contains all optimized register settings for running  
; the sensor in the demo environment. Other sections include settings optimized for a  
; variety of situations like: Running at different master clock speeds, running under 
; different lighting situations, running with different lenses, etc.    
; Most of the demonstration software (DevWare, SensorDemo, ...) make use of this file  
; to load and store the user presets.
; 
; Keyname description:
; REG      = assign a new register value for an address defined in the xsdat file. 
; BITFIELD = do a READ-MODIFY-WRITE to part of a register. The part is defined as a mask.
; FIELD_WR = Write any register, variable or bitfield, specified by its symbol name 
; LOAD     = load an alternate section from this section
; STATE    = set non-register state   
; DELAY    = delay a certain amount of milliseconds before continuing   
; POLL_REG = Read a register a specified number of times, or until the register
;            value no longer meets a specified condition. You specify the 
;            register by its address, and it only works with simple registers. 
;            You also specify a delay between each iteration of the loop.
; POLL_FIELD = Like POLL_REG except you specify the register by its symbol name   
;            as defined in the sensor data file. POLL_FIELD works with any kind  
;            of register or variable.  
;                     
; Keyname format:  
; REG_BURST= [<page>,] <address>, <value>             //<comment> 
; BITFIELD = [<page>,] <address>, <mask>, <value>  
;            Some examples:  
;            BITFIELD=2, 0x05, 0x0020, 1 //for register 5 on page 2, set the 6th bit to 1  
;            BITFIELD=0x06, 0x000F, 0    //for register 6, clear the first 4 bits  
; FIELD_WR = <registername>, [<bitfieldname>,] <value> 
; LOAD     = <section> 
; STATE    = <state>, <value>   
; DELAY    = <milliseconds> 
; POLL_REG = [<page>,]<address>,<mask>,<condition>,DELAY=<milliseconds>,TIMEOUT=<count> //<comment>  
;            Example:  Poll every 50ms, stop when value <= 8 or after 5 times (250ms). 
;            POLL_REG= 2, 0x3F, 0xFFFF, >8, DELAY=50, TIMEOUT=5    
; POLL_FIELD = <registername>, [<bitfieldname>,] <condition>, DELAY=<milliseconds>, TIMEOUT=<count> //<comment>   
;            Example:  Poll every 10 ms, stop when the value = 0, or after 500ms.  
;            POLL_FIELD = SEQ_CMD, !=0, DELAY=10, TIMEOUT=50   
;
;<page>         Optional address space for this register. Some sensors (mostly SOCs)  
;               have multiple register pages (see the sensor spec or developer s guide 
; <address>      the register address      
; <value>        the new value to assign to the register  
; <mask>         is the part of a register value that needs to be updated with a new value  
; <registername> Name of a register or variable as defined the sensor data (.sdat) file  
; <bitfieldname> Optional name of a bitfield    
; <condition>    <  <=  ==  !=  >  or  >=  followed by a numerical value
; <count>        Number of iterations of the polling loop  
; <section>      the name of another section to load  
; <state>        non-register program state names [do not modify] 
; <milliseconds> wait for this ammount of milliseconds before continuing  
; <comment>      Some form of C-style comments are supported in this .ini file  
; 
;*************************************************************************************/
 
[Demo Initialization] 
OPTION = Plugin Toolbar Show, 0 
OPTION = User Toolbar Show , 1 
OPTION = User Toolbar 2 Show , 0 
OPTION = RegisterLog Show , 1 
OPTION = RegisterLog Clear, 1 
LOAD = Zoom.25X 
 
; poll for PMIC @ address 0xA8 (I2C): 
;	- if successfull: MV Reference Module HW detected (Demo 3 + IAS adapter AP21114 + XGS12M MV Module) -> load default MVRM configuration (12 lane)  
; 	- timeout: default to standard demo kit setup initialization (Demo 3 + Frame Buffer Board + Sensor Headboard) -> Load default 24-lane mode settings 
IF_SERIAL = 0xA8, 0x1FFF, 0xFF, 16:8, == 0xFE, LOAD = Initialize X-Cube , ELSELOAD = Initialize 24 Lanes 12 Bit 
LOAD = python: check_color 
 
; temporary 'bright pixels' workaround on X-Cube(to be removed) 
LOAD = Python: X-Cube_bugfix 
 
[Hidden: Initialize_sensor]  
; Power cycle the boards 
LOAD = PwrCycle 
 
; wait until the sensor is ready to receive register writes: 
LOG = WAITING UNTIL THE SENSOR IS READY TO RECEIVE WRITES (REG 0x3706[3:0] = 0x3) 
POLL_REG = 0x3706, 0x000F, !=0x3, DELAY=25, TIMEOUT=500  
 
[Hidden: Initialize_sensor_10b]  
; Power cycle the boards 
LOAD = PwrCycle 
 
; wait until the sensor is ready to receive register writes: 
LOG = WAITING UNTIL THE SENSOR IS READY TO RECEIVE WRITES (REG 0x3706[3:0] = 0x3) 
POLL_REG = 0x3706, 0x000F, !=0x3, DELAY=25, TIMEOUT=500  
 
LOAD = Req_Reg_Up_10b 
LOAD = Timing_Up_10b 
 
[Hidden: python: check_otpm_depended_uploads]  
# Checking the version of OTPM and uploading settings accordingly, reg 0x3700[5] needs to be enabled to read the OTPM version 
apbase.log("Checking OTPM version (enable register 0x3700[5] = 1) --> reg 0x3016[3:0]") 
 
reg.reg(0x3700).value = 0x0020  
apbase.delay(50) 
otpmversion = reg.reg(0x3016).bitfield(0xF).uncached_value  
apbase.log("OTPM version: " + str(otpmversion)) 
reg.reg(0x3700).value = 0x0000 
 
if otpmversion == 0:  
    apbase.log("Loading required register uploads") 
    apbase.load_preset("Req_Reg_Up_0")  
    apbase.log("Loading timing uploads") 
    apbase.load_preset("Timing_Up")  
 
[Hidden: Activate_sensor]  
LOG = Activating sensor 
 
; Enable PLL and Analog blocks 
REG = 0x3700 , 0x001c  
 
; Check if initialization is complete 
LOG = WAITING UNTIL INITIALIZATION IS COMPLETE (REG 0x3706[7:0] = 0xEB) 
POLL_REG = 0x3706, 0x00FF, !=0xEB, DELAY=25, TIMEOUT=500  
 
; Enable sequencer  
LOG = Enabling sequencer 
BITFIELD = 0x3800 , 0x0001, 1  
 
 
 
;************************************************************************************** 
;************************************************************************************** 
; Toolbar Buttons 
;************************************************************************************** 
;************************************************************************************** 
 
[] 
[###### Tools ######] 
 
[Toolbar: Quick Zoom] 
ICON= zoom_in.ico 
TOOLTIP= "Select a Display Zoom setting" 
MENUITEM= "1/4 x", LOAD = Zoom.25X, RADIO = STATE:Display Zoom Percent == 25 
MENUITEM= "1:1", LOAD = Zoom1X, RADIO = STATE:Display Zoom Percent == 100 
MENUITEM= "4 x", LOAD = Zoom4X, RADIO = STATE:Display Zoom Percent == 400 
 
[Toolbar: Power Cycle Boards]  
TOOLTIP = "Toggle Sensor boards power"  
PYTHON= devware.stop(True)  
LOAD = PwrCycle  
PYTHON= devware.stop(False)  
 
[Toolbar: Sensor Reset] 
ICON = refresh.ico 
TOOLTIP = "Assert Sensor Hard Reset and Re-initialize Sensor" 
LOAD = Sensor Hard Reset 
LOAD = Demo Initialization 
;PROMPT = "Sensor has been reset to its initial configuration" 
 
[Toolbar: Reg Dump] 
ICON = document_pulse.ico 
TOOLTIP = Read all sensor registers and store value in .ini file  
PYTHON = devware.stop(True) 
BITFIELD = 0x3800 , 0x0001, 0 //disable sequencer 
SAVE_REGS = register_dump.ini 
PROMPT = "File register_dump.ini has been stored in the ini folder (default: C:/Aptina Imaging/apps_data)" 
BITFIELD = 0x3800 , 0x0001, 1 //re-enable sequencer 
PYTHON = devware.stop(False) 
 
[Toolbar: Black Reference Visibility] 
ICON = ROI-24.ico 
TOOLTIP = "Show/Hide Black Reference Pixels" 
MENUITEM = "Show Black Reference Pixels", LOAD = Show Black Reference 
MENUITEM = "Hide Black Reference Pixels", LOAD = Hide Black Reference 
 
[Toolbar: Monitor Pins] 
ICON = oszillograph.ico 
TOOLTIP = "Enable/Disable Signal on Monitor Pins" 
MENUITEM = "Enable Monitor Pins", LOAD = EnableMonitorPins 
MENUITEM = "Disable Monitor Pins", LOAD = DisableMonitorPins 
 
[] 
[###### Demokit ######] 
 
[Toolbar: 12-Bit: Initialize 24/18/12/6 Lanes] 
TOOLTIP = "Select Mux Mode in 12 Bit"  
MENUITEM = "Initialize 24 Lanes 12 Bit", LOAD = Initialize 24 Lanes 12 Bit 
MENUITEM = "Initialize 18 Lanes 12 Bit", LOAD = Initialize 18 Lanes 12 Bit 
MENUITEM = "Initialize 12 Lanes 12 Bit", LOAD = Initialize 12 Lanes 12 Bit 
MENUITEM = "Initialize 6 Lanes 12 Bit", LOAD = Initialize 6 Lanes 12 Bit 
 
[Initialize 24 Lanes 12 Bit]  
TOOLTIP = "Initialize Sensor in 24 Lanes 12 Bit Mode"  
 
; Check if X-Cube is being used 
ERROR_IF = HISPI_CONTROL_COMMON_REG, OUTPUT_MSB_FIRST, == 0, "The X-Cube is selected. This preset is not possible because the muxmode is fixed to 12 lanes in the FPGA. Please use a demokit for this #######################################" 
 
OPTION = RegisterLog Clear, 1 
LOG = ######################################################### 
LOG = ###### Initializing Sensor in 24 Lanes 12 Bit Mode ###### 
LOG = ######################################################### 
LOAD = Initialize_sensor 
LOAD = python: check_otpm_depended_uploads  
LOAD = Enable24lanes  
LOAD = Activate_sensor 
 
[Initialize 18 Lanes 12 Bit]  
TOOLTIP = "Initialize Sensor in 18 Lanes 12 Bit Mode"  
 
; Check if X-Cube is being used 
ERROR_IF = HISPI_CONTROL_COMMON_REG, OUTPUT_MSB_FIRST, == 0, "The X-Cube is selected. This preset is not possible because the muxmode is fixed to 12 lanes in the FPGA. Please use a demokit for this #######################################" 
 
OPTION = RegisterLog Clear, 1 
LOG = ######################################################### 
LOG = ###### Initializing Sensor in 18 Lanes 12 Bit Mode ###### 
LOG = ######################################################### 
LOAD = Initialize_sensor 
LOAD = python: check_otpm_depended_uploads  
LOAD = Enable18lanes  
LOAD = Activate_sensor 
 
[Initialize 12 Lanes 12 Bit] 
TOOLTIP = "Initialize Sensor in 12 Lanes 12 Bit Mode" 
 
; Check if X-Cube is being used 
ERROR_IF = HISPI_CONTROL_COMMON_REG, OUTPUT_MSB_FIRST, == 0, "The X-Cube is selected. Please use a demokit for this setup or use the X-Cube presets #######################################" 
 
OPTION = RegisterLog Clear, 1 
LOG = ######################################################### 
LOG = ###### Initializing Sensor in 12 Lanes 12 Bit Mode ###### 
LOG = ######################################################### 
LOAD = Initialize_sensor 
LOAD = python: check_otpm_depended_uploads  
LOAD = Enable12lanes  
LOAD = Activate_sensor 
 
[Initialize 6 Lanes 12 Bit]  
TOOLTIP = "Initialize Sensor in 6 Lanes 12 Bit Mode"  
 
; Check if X-Cube is being used 
ERROR_IF = HISPI_CONTROL_COMMON_REG, OUTPUT_MSB_FIRST, == 0, "The X-Cube is selected. Please use a demokit for this setup or use the X-Cube presets #######################################" 
 
OPTION = RegisterLog Clear, 1 
LOG = ######################################################### 
LOG = ###### Initializing Sensor in 6 Lanes 12 Bit Mode ###### 
LOG = ######################################################### 
LOAD = Initialize_sensor 
LOAD = python: check_otpm_depended_uploads  
LOAD = Enable6lanes  
LOAD = Activate_sensor 
 
[Toolbar: Companding Mode] 
TOOLTIP = "Select Mux Mode Companding configuration" 
MENUITEM = "Initialize 24 Lanes Companding", LOAD = Initialize 24 Lanes Companding 
MENUITEM = "Initialize 18 Lanes Companding", LOAD = Initialize 18 Lanes Companding 
MENUITEM = "Initialize 12 Lanes Companding", LOAD = Initialize 12 Lanes Companding 
MENUITEM = "Initialize 6 Lanes Companding", LOAD = Initialize 6 Lanes Companding 
 
[Initialize 24 Lanes Companding]  
TOOLTIP = "Initialize Sensor in 24 Lanes 12 Bit Mode"  
 
; Check if X-Cube is being used 
ERROR_IF = HISPI_CONTROL_COMMON_REG, OUTPUT_MSB_FIRST, == 0, "Companding mode is not implemented for the X-Cube yet #######################################" 
 
OPTION = RegisterLog Clear, 1 
LOG = ############################################################# 
LOG = ###### Initializing Sensor in 24 Lanes Companding Mode ###### 
LOG = ############################################################# 
LOAD = Initialize_sensor 
LOAD = python: check_otpm_depended_uploads  
LOAD = Enable24lanesCompanding 
 
; Enable SP Streaming (Will be removed when SP packetized devware bug for 24 lanes is fixed) 
STATE = RX Mode, 1 
 
LOAD = Activate_sensor 
 
[Initialize 18 Lanes Companding]  
TOOLTIP = "Initialize Sensor in 18 Lanes 12 Bit Mode"  
 
; Check if X-Cube is being used 
ERROR_IF = HISPI_CONTROL_COMMON_REG, OUTPUT_MSB_FIRST, == 0, "Companding mode is not implemented for the X-Cube yet #######################################" 
 
OPTION = RegisterLog Clear, 1 
LOG = ############################################################# 
LOG = ###### Initializing Sensor in 18 Lanes Companding Mode ###### 
LOG = ############################################################# 
LOAD = Initialize_sensor 
LOAD = python: check_otpm_depended_uploads  
LOAD = Enable18lanesCompanding  
LOAD = Activate_sensor 
 
[Initialize 12 Lanes Companding] 
TOOLTIP = "Initialize Sensor in 12 Lanes Companding Mode" 
 
; Check if X-Cube is being used 
ERROR_IF = HISPI_CONTROL_COMMON_REG, OUTPUT_MSB_FIRST, == 0, "Companding mode is not implemented for the X-Cube yet #######################################" 
 
OPTION = RegisterLog Clear, 1 
LOG = ############################################################# 
LOG = ###### Initializing Sensor in 12 Lanes Companding Mode ###### 
LOG = ############################################################# 
LOAD = Initialize_sensor 
LOAD = python: check_otpm_depended_uploads  
LOAD = Enable12lanesCompanding 
LOAD = Activate_sensor 
 
[Initialize 6 Lanes Companding] 
TOOLTIP = "Initialize Sensor in 6 Lanes Companding Mode" 
 
; Check if X-Cube is being used 
ERROR_IF = HISPI_CONTROL_COMMON_REG, OUTPUT_MSB_FIRST, == 0, "Companding mode is not implemented for the X-Cube yet #######################################" 
 
OPTION = RegisterLog Clear, 1 
LOG = ############################################################# 
LOG = ###### Initializing Sensor in 6 Lanes Companding Mode ###### 
LOG = ############################################################# 
LOAD = Initialize_sensor 
LOAD = python: check_otpm_depended_uploads  
LOAD = Enable6lanesCompanding  
LOAD = Activate_sensor 
 
[Toolbar: 10-Bit: Initialize 24/18/12/6 Lanes] 
TOOLTIP = "Select Mux Mode in 10 Bit"  
MENUITEM = "Initialize 24 Lanes 10 Bit", LOAD = Initialize 24 Lanes 10 Bit 
MENUITEM = "Initialize 18 Lanes 10 Bit", LOAD = Initialize 18 Lanes 10 Bit 
MENUITEM = "Initialize 12 Lanes 10 Bit", LOAD = Initialize 12 Lanes 10 Bit 
MENUITEM = "Initialize 6 Lanes 10 Bit", LOAD = Initialize 6 Lanes 10 Bit 
 
[Initialize 24 Lanes 10 Bit]  
TOOLTIP = "Initialize Sensor in 24 Lanes 10 Bit Mode"  
 
; Check if X-Cube is being used 
ERROR_IF = HISPI_CONTROL_COMMON_REG, OUTPUT_MSB_FIRST, == 0, "The X-Cube is selected. This preset is not possible because the muxmode is fixed to 12 lanes in the FPGA. Please use a demokit for this #######################################" 
 
OPTION = RegisterLog Clear, 1 
LOG = ######################################################### 
LOG = ###### Initializing Sensor in 24 Lanes 10 Bit Mode ###### 
LOG = ######################################################### 
LOAD = Initialize_sensor_10b 
LOAD = Enable24lanes10bit  
 
; Enable SP Streaming (Will be removed when SP packetized devware bug for 24 lanes is fixed) 
STATE = RX Mode, 1 
 
LOAD = Activate_sensor 
 
[Initialize 18 Lanes 10 Bit]  
TOOLTIP = "Initialize Sensor in 18 Lanes 10 Bit Mode"  
 
; Check if X-Cube is being used 
ERROR_IF = HISPI_CONTROL_COMMON_REG, OUTPUT_MSB_FIRST, == 0, "The X-Cube is selected. This preset is not possible because the muxmode is fixed to 12 lanes in the FPGA. Please use a demokit for this #######################################" 
 
OPTION = RegisterLog Clear, 1 
LOG = ######################################################### 
LOG = ###### Initializing Sensor in 18 Lanes 10 Bit Mode ###### 
LOG = ######################################################### 
LOAD = Initialize_sensor_10b 
LOAD = Enable18lanes10bit  
LOAD = Activate_sensor 
 
[Initialize 12 Lanes 10 Bit] 
TOOLTIP = "Initialize Sensor in 12 Lanes 10 Bit Mode" 
 
; Check if X-Cube is being used 
ERROR_IF = HISPI_CONTROL_COMMON_REG, OUTPUT_MSB_FIRST, == 0, "The X-Cube is selected. Please use a demokit for this setup or use the X-Cube presets #######################################" 
 
OPTION = RegisterLog Clear, 1 
LOG = ######################################################### 
LOG = ###### Initializing Sensor in 12 Lanes 10 Bit Mode ###### 
LOG = ######################################################### 
LOAD = Initialize_sensor_10b 
LOAD = Enable12lanes10bit  
LOAD = Activate_sensor 
 
[Initialize 6 Lanes 10 Bit]  
TOOLTIP = "Initialize Sensor in 6 Lanes 10 Bit Mode"  
 
; Check if X-Cube is being used 
ERROR_IF = HISPI_CONTROL_COMMON_REG, OUTPUT_MSB_FIRST, == 0, "The X-Cube is selected. Please use a demokit for this setup or use the X-Cube presets #######################################" 
 
OPTION = RegisterLog Clear, 1 
LOG = ######################################################### 
LOG = ###### Initializing Sensor in 6 Lanes 10 Bit Mode ###### 
LOG = ######################################################### 
LOAD = Initialize_sensor_10b 
LOAD = Enable6lanes10bit  
LOAD = Activate_sensor 
 
[###### X-Cube ######] 
 
[Initialize X-Cube] 
TOOLTIP = "Initialize Sensor in 12 Lanes 12 Bit Mode X-Cube Configuration"  
 
OPTION = RegisterLog Clear, 1 
LOG = ################################################################## 
LOG = ###### Initializing Sensor in 12 Lanes 12 Bit Mode (X-Cube) ###### 
LOG = ################################################################## 
LOAD = Initialize_sensor 
LOAD = python: check_otpm_depended_uploads  
LOAD = Enable_X-Cube  
LOAD = Activate_sensor 
 
[Toolbar2: X-Cube FPS] 
ICON = running_man_24.ico 
TOOLTIP = "Select desired FPS for X-Cube" 
MENUITEM = "12Mp @ 10 fps (Tint = 25ms)", LOAD = 10fps_X-Cube 
MENUITEM = "12Mp @ 20 fps (Tint = 50ms)", LOAD = 20fps_X-Cube 
MENUITEM = "12Mp @ 30 fps (Tint = 30ms)", LOAD = //30fps_X-Cube 
MENUITEM = "4K UHD @ 30 fps (Tint = 30ms)", LOAD = 30fps_X-Cube_4K 
 
[] 
[###################] 
[Toolbar: Short Integration Config] 
TOOLTIP = "Initialization settings to reach a minimum of 10us in all muxmodes" 
PYTHON = devware.stop(True)

; Disable sequencer 
BITFIELD = 0x3800 , 0x0001, 0 

LOAD = python: Short_Integration_Config 
DELAY = 100 

; Enable sequencer 
BITFIELD = 0x3800 , 0x0001, 1 

PYTHON = devware.stop(False)
 
 
 
;************************************************************************************** 
;************************************************************************************** 
; Sensor Required Uploads for 12 Bit 
;************************************************************************************** 
;************************************************************************************** 
 
[Hidden: Req_Reg_Up_0] 
REG = 0x3990, 0x2490 
REG = 0x341a, 0x0303 
REG = 0x3816, 0x0004 
REG = 0x3818, 0x0002 
REG = 0x38ac, 0x1602 
REG = 0x391c, 0x6000 
REG = 0x389a, 0x0802 
REG = 0x38e2, 0x0000 
REG = 0x38c6, 0x0A0A 
REG = 0x38e4, 0x0019 
REG = 0x38e6, 0x0019 
REG = 0x38c8, 0x000A 
REG = 0x38e8, 0x0019 
REG = 0x38ca, 0x0707 
REG = 0x38ea, 0x003E 
REG = 0x38ec, 0x003E 
REG = 0x38cc, 0x0007 
REG = 0x38ee, 0x003E 
REG = 0x3906, 0x0021 
REG = 0x3914, 0x003A 
REG = 0x3918, 0x003A 
REG = 0x390c, 0x003A 
REG = 0x3934, 0x0108 
REG = 0x3938, 0x0108 
REG = 0x393c, 0x0108 
REG = 0x3944, 0x0108 
REG = 0x3936, 0x0108 
REG = 0x393a, 0x0108 
REG = 0x393e, 0x0108 
REG = 0x3946, 0x0108 
REG = 0x3948, 0x0108 
REG = 0x394c, 0x0108 
REG = 0x3950, 0x0108 
REG = 0x3958, 0x0108 
REG = 0x394a, 0x0108 
REG = 0x394e, 0x0108 
REG = 0x3952, 0x0108 
REG = 0x395a, 0x0108 
REG = 0x3924, 0x0095 
REG = 0x3928, 0x0108 
REG = 0x392c, 0x0095 
REG = 0x3930, 0x0108 
REG = 0x3926, 0x0095 
REG = 0x392a, 0x0108 
REG = 0x392e, 0x0095 
REG = 0x3932, 0x0108 
REG = 0x3940, 0x0095 
REG = 0x3954, 0x0095 
REG = 0x3942, 0x0095 
REG = 0x3956, 0x0095 
REG = 0x383a, 0x0C20 
REG = 0x395e, 0x004B 
REG = 0x3844, 0x0100 
REG = 0x3402, 0x0D0D 
REG = 0x341e, 0x101F 
REG = 0x3420, 0x5F16 
REG = 0x3424, 0xA7A6 
REG = 0x3430, 0x20B6 
REG = 0x3428, 0xA620 
REG = 0x342a, 0x0000 
REG = 0x3434, 0xFFFF 
 
 
[Hidden: Timing_Up] 
REG_BURST = 0x4000, 0x0001, 0x817C, 0x0012, 0xA97C, 0x000F, 0xA97C, 0x000C, 0xA97C, 0x0001, 0x817C, 0x501F, 0x817C, 0x501F, 0x817C, 0x5017, 0x817C, 0x500F, 0x817C, 0x5A01, 0x817C, 0x5F02, 0x817C, 0x5A01, 0x817C, 0x501F, 0x817C, 0x501F, 0x817C, 0x501F, 0x817C, 0x501F, 0x817C, 0x501F, 0x817C, 0x5015, 0x817C, 0x500F, 0x817C, 0x500F, 0x817C, 0x5001, 0x817C, 0x5502, 0x817C, 0x501A, 0x817C, 0x5008, 0x817C, 0x5000, 0x817C
 
REG_BURST = 0x4064, 0x5021, 0x0071, 0x5022, 0x007D, 0x5A21, 0x007D, 0x5F22, 0x007D, 0x5A21, 0x007D, 0x5034, 0x007D, 0x502F, 0x007D, 0x5027, 0x007D, 0x5021, 0x007D, 0x5522, 0x007D, 0x5021, 0x007D, 0x5022, 0x007D, 0x5031, 0x0071, 0x502F, 0x0071, 0x5022, 0x0071, 0x0021, 0x0071, 0x0031, 0x5071, 0x002F, 0x5071, 0x0023, 0x5071, 0x0021, 0x0071, 0xA032, 0x0071, 0xA02B, 0x0071, 0x2021, 0x0071, 0x200F, 0x2071, 0x200A, 0x2071, 0x2001, 0x0071, 0x600B, 0x0071, 0x4001, 0x0071, 0x400F, 0x0871, 0x400A, 0x0871, 0x4001, 0x0071, 0x501F, 0x0071, 0x501B, 0x0071, 0x500F, 0x0071, 0x5001, 0x0070, 0x5001, 0x0072, 0x5000, 0x0072
 
REG_BURST = 0x40F8, 0x5001, 0x0072, 0x501A, 0x0072, 0x500D, 0x0072, 0x5001, 0x0070, 0x5032, 0x00F0, 0x5021, 0x00F0, 0x5021, 0x0070, 0x5020, 0x0071
 
REG_BURST = 0x4118, 0x5011, 0x0072, 0x500F, 0x0072, 0x500C, 0x0072, 0x501A, 0x0072, 0x500D, 0x0072, 0x5001, 0x0070, 0x5032, 0x00F0, 0x5021, 0x00F0, 0x5021, 0x0070, 0x5020, 0x0071
 
REG_BURST = 0x4140, 0x501A, 0x0072, 0x500B, 0x0072, 0x501A, 0x0072, 0x500D, 0x0072, 0x5001, 0x0070, 0x5032, 0x00F0, 0x5021, 0x00F0, 0x5021, 0x0070, 0x5020, 0x0071
 
REG_BURST = 0x4164, 0x501F, 0x0072, 0x501F, 0x0072, 0x5013, 0x0072, 0x5007, 0x0072, 0x501A, 0x0072, 0x500D, 0x0072, 0x5001, 0x0070, 0x5032, 0x00F0, 0x5021, 0x00F0, 0x5021, 0x0070, 0x5020, 0x0071
 
REG_BURST = 0x4190, 0x5012, 0x0072, 0x500F, 0x0072, 0x5008, 0x0072, 0x501A, 0x0072, 0x500D, 0x0072, 0x5001, 0x0070, 0x5032, 0x00F0, 0x5021, 0x00F0, 0x5021, 0x0070, 0x5020, 0x0071
 
REG_BURST = 0x5000, 0x5201, 0x2311, 0x007C, 0x5302, 0x2311, 0x007C, 0x5201, 0x2311, 0x007C, 0x5001, 0x2311, 0x007C, 0x5005, 0x3F11, 0x007C, 0x5001, 0x3F19, 0x007C, 0x5002, 0x3F1D, 0x007E, 0x5001, 0x3F19, 0x007E, 0x5002, 0x3F11, 0x007E, 0x5003, 0x3B11, 0x006E, 0x5001, 0x3911, 0x0066, 0x5001, 0x3911, 0x0046, 0x5009, 0x7911, 0x00C6, 0x5018, 0x7111, 0x00C6, 0x5182, 0x7111, 0x00C6, 0x509F, 0x7111, 0x00C6, 0x5098, 0x7111, 0x00C6, 0x5081, 0x7111, 0x00C6, 0x509C, 0x6111, 0x00C6, 0x5081, 0x6111, 0x00C6, 0x5881, 0x6111, 0x00C6, 0x5C81, 0x6111, 0x00C7, 0x5C01, 0xE111, 0x00C7, 0x5801, 0xE011, 0x00C5, 0x501B, 0xE011, 0x00C5, 0x5402, 0xE011, 0x00C5, 0x501D, 0xE011, 0x00C5, 0x5006, 0xE011, 0x00C5, 0x509F, 0x6011, 0x00C5, 0x508D, 0x6011, 0x00C5, 0x5001, 0x6015, 0x0045, 0x5001, 0x6215, 0x006D, 0x5000, 0x5F11, 0x007C
 
REG_BURST = 0x50C6, 0x5001, 0x3F11, 0x007C, 0x5082, 0x3F11, 0x007C, 0x5003, 0x3F11, 0x007C, 0x5005, 0x3F11, 0x007E, 0x5003, 0x3B11, 0x006E, 0x5001, 0x3911, 0x0066, 0x5001, 0x3911, 0x0046, 0x5009, 0x7911, 0x00C6, 0x501F, 0x7111, 0x00C6, 0x501F, 0x7111, 0x00C6, 0x5005, 0x7111, 0x00C6, 0x501D, 0x6111, 0x00C6, 0x5001, 0x6111, 0x00C7, 0x5001, 0xE111, 0x00C7, 0x501F, 0xE011, 0x00C5, 0x501A, 0xE011, 0x00C5, 0x5001, 0xE011, 0x00C5, 0x501F, 0x6011, 0x00C5, 0x5019, 0x6011, 0x00C5, 0x5001, 0x6011, 0x00C5, 0x5001, 0x6011, 0x0045, 0x5001, 0x6011, 0x006D, 0x5001, 0x2211, 0x007C, 0x5004, 0x2311, 0x007C, 0x5000, 0x2311, 0x007C
 
REG_BURST = 0x515C, 0x5201, 0x2F11, 0x007C, 0x5382, 0x2F11, 0x007C, 0x5201, 0x2F11, 0x007C, 0x5006, 0x2F11, 0x007C, 0x5005, 0x3F11, 0x007C, 0x5001, 0x3F19, 0x007C, 0x5002, 0x3F1D, 0x007E, 0x5001, 0x3F19, 0x007E, 0x5006, 0x3F11, 0x007E, 0x501A, 0x3F11, 0x005E, 0x5001, 0x3F11, 0x005E, 0x5102, 0x3F11, 0x005E, 0x501F, 0x3F11, 0x005E, 0x5018, 0x3F11, 0x005E, 0x5001, 0x3F11, 0x005E, 0x501C, 0x2F11, 0x005E, 0x5001, 0x2F11, 0x005E, 0x5801, 0x2F11, 0x005E, 0x5C01, 0x2F11, 0x005F, 0x5C01, 0xAF11, 0x005F, 0x5801, 0xAE11, 0x005D, 0x501B, 0xAE11, 0x005D, 0x5402, 0xAE11, 0x005D, 0x501D, 0xAE11, 0x005D, 0x501F, 0x2E11, 0x005D, 0x5019, 0x2E11, 0x005D, 0x5001, 0x2E11, 0x005D, 0x5001, 0x2E15, 0x005D, 0x5001, 0x2E15, 0x007D, 0x5000, 0x2E11, 0x007C
 
REG_BURST = 0x6420, 0x0002, 0x001C, 0x0001, 0x0000, 0x0004, 0x0160, 0x0041, 0x0160, 0x0042, 0x0160, 0x0043, 0x0160, 0x0042, 0x0060, 0x0042, 0x1060, 0x0001, 0x1060, 0x0001, 0x9060, 0x0002, 0x9060, 0x0006, 0x9060, 0x0081, 0x9060, 0x0081, 0x1060, 0x0022, 0x1060, 0x0028, 0x1060, 0x0001, 0x1020, 0x0001, 0x1000, 0x2001, 0x1000, 0x0002, 0x1000, 0x0008, 0x1200, 0x0003, 0x1000, 0x0002, 0x1004, 0x0001, 0x5000, 0xC001, 0x5002, 0xE001, 0x5002, 0xC001, 0x7002, 0x8001, 0x5002, 0x8001, 0x5002, 0x8901, 0x5002, 0xBE01, 0x5002, 0x8001, 0x7002, 0xC001, 0x5002, 0x4001, 0x5002, 0x4901, 0x5002, 0x7E01, 0x5002, 0x4001, 0x7002, 0x0001, 0x5002, 0x0001, 0x5002, 0x0901, 0x5002, 0x3E01, 0x5002, 0x0001, 0x7002, 0x4001, 0x5002, 0xC001, 0x5001, 0xC901, 0x5001, 0xFE01, 0x5001, 0xC001, 0x7001, 0x8001, 0x5001, 0x8001, 0x5001, 0x8901, 0x5001, 0xBE01, 0x5001, 0x8001, 0x7001, 0xC001, 0x5001, 0x4001, 0x5001, 0x4901, 0x5001, 0x7E01, 0x5001, 0x4001, 0x7001, 0x0001, 0x5001, 0x0001, 0x5001, 0x0901, 0x5001, 0x3E01, 0x5001, 0x0001, 0x7001, 0x4001, 0x5001, 0xC001, 0x5000, 0xC901, 0x5000, 0xFE01, 0x5000, 0xC001, 0x7000, 0x8001, 0x5000, 0x8001, 0x5000, 0x8901, 0x5000, 0x9E01, 0x5000, 0x8002, 0x5000, 0x0001, 0x1000, 0x0001, 0x100C, 0x0001, 0x106C, 0x001F, 0x1060, 0x0005, 0x1060, 0x0001, 0x1020, 0x0005, 0x1000, 0x8001, 0x5003, 0xA001, 0x1003, 0x8001, 0x1003, 0x8001, 0x1003, 0xC001, 0x1003, 0xC001, 0x3003, 0xC001, 0x1003, 0x4001, 0x1003, 0x4801, 0x1003, 0x4901, 0x1003, 0x7E01, 0x1003, 0x4001, 0x1003, 0x4001, 0x1003, 0x4001, 0x1003, 0x0001, 0x3003, 0x0001, 0x1003, 0x0001, 0x1003, 0x0801, 0x1003, 0x0901, 0x1003, 0x3E01, 0x1003, 0x0001, 0x3003, 0x4001, 0x1003, 0xC001, 0x1002, 0xC801, 0x1002, 0xC901, 0x1002, 0xFE01, 0x1002, 0xC001, 0x3002, 0x8001, 0x1002, 0x8001, 0x1002, 0x8801, 0x1002, 0x8901, 0x1002, 0xBE01, 0x1002, 0x8001, 0x3002, 0xC001, 0x1002, 0x4001, 0x1002, 0x4801, 0x1002, 0x4901, 0x1002, 0x7E01, 0x1002, 0x4001, 0x3002, 0x0001, 0x1002, 0x0001, 0x1002, 0x0801, 0x1002, 0x0901, 0x1002, 0x3E01, 0x1002, 0x0001, 0x3002, 0x4001, 0x1002, 0xC001, 0x1001, 0xC801, 0x1001, 0xC901, 0x1001, 0xFE01, 0x1001, 0xC001, 0x3001, 0x8001, 0x1001, 0x8001, 0x1001, 0x8801, 0x1001, 0x8901, 0x1001, 0xBE01, 0x1001, 0x8001, 0x3001, 0xC001, 0x1001, 0x4001, 0x1001, 0x4901, 0x1001, 0x7E01, 0x1001, 0x4001, 0x3001, 0x0001, 0x1001, 0x0001, 0x1001, 0x0901, 0x1001, 0x3E01, 0x1001, 0x0001, 0x3001, 0x4001, 0x1001, 0xC001, 0x1000, 0xC901, 0x1000, 0xFE01, 0x1000, 0xC001, 0x3000, 0x8001, 0x1000, 0x8001, 0x1000, 0x8901, 0x1000, 0x9E01, 0x1000, 0x8001, 0x1000, 0x0001, 0x1000, 0x0000, 0x1000
 
REG_BURST = 0x6254, 0x0062, 0x011C, 0x007C, 0x0100, 0x0061, 0x0100, 0x00E2, 0x0100, 0x006C, 0x0100, 0x2061, 0x0100, 0x0062, 0x0100, 0x0068, 0x0300, 0x0063, 0x0100, 0x0062, 0x0104, 0x0061, 0x4100, 0xC061, 0x6102, 0xE061, 0x4102, 0xC062, 0x4102, 0x8061, 0x4102, 0x8961, 0x6102, 0xBE61, 0x4102, 0x8062, 0x4102, 0x4061, 0x4102, 0x4961, 0x6102, 0x7E61, 0x4102, 0x4062, 0x4102, 0x0061, 0x4102, 0x0961, 0x6102, 0x3E61, 0x4102, 0x0062, 0x4102, 0xC061, 0x4101, 0xC961, 0x6101, 0xFE61, 0x4101, 0xC062, 0x4101, 0x8061, 0x4101, 0x8961, 0x6101, 0xBE61, 0x4101, 0x8062, 0x4101, 0x4061, 0x4101, 0x4961, 0x6101, 0x7E61, 0x4101, 0x4062, 0x4101, 0x0061, 0x4101, 0x0961, 0x6101, 0x3E61, 0x4101, 0x0062, 0x4101, 0xC061, 0x4100, 0xC961, 0x6100, 0xFE61, 0x4100, 0xC062, 0x4100, 0x8061, 0x4100, 0x8961, 0x4100, 0x9E61, 0x4100, 0x8062, 0x4100, 0x0061, 0x0100, 0x0062, 0x010C, 0x007F, 0x0100, 0x006B, 0x0100, 0x8061, 0x4103, 0xA061, 0x0103, 0x8061, 0x0103, 0x8061, 0x2103, 0x8063, 0x0103, 0x4061, 0x0103, 0x4961, 0x0103, 0x7E61, 0x0103, 0x4061, 0x0103, 0x4061, 0x2103, 0x4063, 0x0103, 0x0061, 0x0103, 0x0961, 0x2103, 0x3E61, 0x0103, 0x0062, 0x0103, 0xC061, 0x0102, 0xC961, 0x2102, 0xFE61, 0x0102, 0xC062, 0x0102, 0x8061, 0x0102, 0x8961, 0x2102, 0xBE61, 0x0102, 0x8062, 0x0102, 0x4061, 0x0102, 0x4961, 0x2102, 0x7E61, 0x0102, 0x4062, 0x0102, 0x0061, 0x0102, 0x0961, 0x2102, 0x3E61, 0x0102, 0x0062, 0x0102, 0xC061, 0x0101, 0xC961, 0x2101, 0xFE61, 0x0101, 0xC062, 0x0101, 0x8061, 0x0101, 0x8961, 0x2101, 0xBE61, 0x0101, 0x8062, 0x0101, 0x4061, 0x0101, 0x4961, 0x2101, 0x7E61, 0x0101, 0x4062, 0x0101, 0x0061, 0x0101, 0x0961, 0x2101, 0x3E61, 0x0101, 0x0062, 0x0101, 0xC061, 0x0100, 0xC961, 0x2100, 0xFE61, 0x0100, 0xC062, 0x0100, 0x8061, 0x0100, 0x8961, 0x0100, 0x9E61, 0x0100, 0x8061, 0x0100, 0x8060, 0x0100
 
 
 
 
;************************************************************************************** 
;************************************************************************************** 
; Sensor Required Uploads for 10 Bit 
;************************************************************************************** 
;************************************************************************************** 
 
[Hidden: Req_Reg_Up_10b] 
REG = 0x3502, 0x304B 
REG = 0x3990, 0x2490 
REG = 0x341a, 0x0303 
REG = 0x3816, 0x0004 
REG = 0x3818, 0x0002 
REG = 0x38ac, 0x1602 
REG = 0x391c, 0x6000 
REG = 0x389a, 0x0802 
REG = 0x38e2, 0x0000 
REG = 0x38c6, 0x0A0A 
REG = 0x38e4, 0x0019 
REG = 0x38e6, 0x0019 
REG = 0x38c8, 0x000A 
REG = 0x38e8, 0x0019 
REG = 0x38ca, 0x0707 
REG = 0x38ea, 0x003E 
REG = 0x38ec, 0x003E 
REG = 0x38cc, 0x0007 
REG = 0x38ee, 0x003E 
REG = 0x3906, 0x0020 
REG = 0x3914, 0x0038 
REG = 0x3918, 0x0038 
REG = 0x390c, 0x0038 
REG = 0x3924, 0x008B 
REG = 0x392c, 0x008B 
REG = 0x3926, 0x008B 
REG = 0x392e, 0x008B 
REG = 0x3940, 0x008B 
REG = 0x3954, 0x008B 
REG = 0x3942, 0x008B 
REG = 0x3956, 0x008B 
REG = 0x383a, 0x0C20 
REG = 0x395e, 0x0044 
REG = 0x3966, 0x0045 
REG = 0x3e02, 0x3C39 
REG = 0x3a02, 0x0001 
REG = 0x3844, 0x0100 
REG = 0x3402, 0x0D0D 
REG = 0x341e, 0x101F 
REG = 0x3420, 0x5F16 
REG = 0x3424, 0xA7A6 
REG = 0x3430, 0x20B6 
REG = 0x3428, 0xA620 
REG = 0x342a, 0x0000 
REG = 0x3434, 0xFFFF 
 
 
[Hidden: Timing_Up_10b] 
REG_BURST = 0x4000, 0x0001, 0x817C, 0x0012, 0xA97C, 0x000F, 0xA97C, 0x000C, 0xA97C, 0x0001, 0x817C, 0x501F, 0x817C, 0x501F, 0x817C, 0x5017, 0x817C, 0x500F, 0x817C, 0x5A01, 0x817C, 0x5F02, 0x817C, 0x5A01, 0x817C, 0x501F, 0x817C, 0x501F, 0x817C, 0x501F, 0x817C, 0x501F, 0x817C, 0x501F, 0x817C, 0x5015, 0x817C, 0x500F, 0x817C, 0x500F, 0x817C, 0x5001, 0x817C, 0x5502, 0x817C, 0x501A, 0x817C, 0x5008, 0x817C, 0x5000, 0x817C
 
REG_BURST = 0x4064, 0x5021, 0x0071, 0x5022, 0x007D, 0x5A21, 0x007D, 0x5F22, 0x007D, 0x5A21, 0x007D, 0x5034, 0x007D, 0x502F, 0x007D, 0x5027, 0x007D, 0x5021, 0x007D, 0x5522, 0x007D, 0x5021, 0x007D, 0x5022, 0x007D, 0x5031, 0x0071, 0x502F, 0x0071, 0x5022, 0x0071, 0x0021, 0x0071, 0x0031, 0x5071, 0x002F, 0x5071, 0x0023, 0x5071, 0x0021, 0x0071, 0xA032, 0x0071, 0xA02B, 0x0071, 0x2021, 0x0071, 0x200F, 0x2071, 0x200A, 0x2071, 0x2001, 0x0071, 0x600B, 0x0071, 0x4001, 0x0071, 0x400F, 0x0871, 0x400A, 0x0871, 0x4001, 0x0071, 0x501F, 0x0071, 0x501B, 0x0071, 0x500F, 0x0071, 0x5001, 0x0070, 0x5001, 0x0072, 0x5000, 0x0072
 
REG_BURST = 0x40F8, 0x5001, 0x0072, 0x501A, 0x0072, 0x500D, 0x0072, 0x5001, 0x0070, 0x5032, 0x00F0, 0x5021, 0x00F0, 0x5021, 0x0070, 0x5020, 0x0071
 
REG_BURST = 0x4118, 0x5011, 0x0072, 0x500F, 0x0072, 0x500C, 0x0072, 0x501A, 0x0072, 0x500D, 0x0072, 0x5001, 0x0070, 0x5032, 0x00F0, 0x5021, 0x00F0, 0x5021, 0x0070, 0x5020, 0x0071
 
REG_BURST = 0x4140, 0x501A, 0x0072, 0x500B, 0x0072, 0x501A, 0x0072, 0x500D, 0x0072, 0x5001, 0x0070, 0x5032, 0x00F0, 0x5021, 0x00F0, 0x5021, 0x0070, 0x5020, 0x0071
 
REG_BURST = 0x4164, 0x501F, 0x0072, 0x501F, 0x0072, 0x5013, 0x0072, 0x5007, 0x0072, 0x501A, 0x0072, 0x500D, 0x0072, 0x5001, 0x0070, 0x5032, 0x00F0, 0x5021, 0x00F0, 0x5021, 0x0070, 0x5020, 0x0071
 
REG_BURST = 0x4190, 0x5012, 0x0072, 0x500F, 0x0072, 0x5008, 0x0072, 0x501A, 0x0072, 0x500D, 0x0072, 0x5001, 0x0070, 0x5032, 0x00F0, 0x5021, 0x00F0, 0x5021, 0x0070, 0x5020, 0x0071
 
REG_BURST = 0x5000, 0x5201, 0x2311, 0x007C, 0x5302, 0x2311, 0x007C, 0x5201, 0x2311, 0x007C, 0x5001, 0x2311, 0x007C, 0x5005, 0x3F11, 0x007C, 0x5001, 0x3F19, 0x007C, 0x5002, 0x3F1D, 0x007E, 0x5001, 0x3F19, 0x007E, 0x5002, 0x3F11, 0x007E, 0x5003, 0x3B11, 0x006E, 0x5001, 0x3911, 0x0066, 0x5001, 0x3911, 0x0046, 0x5009, 0x7911, 0x00C6, 0x5006, 0x7111, 0x00C6, 0x5182, 0x7111, 0x00C6, 0x509F, 0x7111, 0x00C6, 0x509A, 0x7111, 0x00C6, 0x509C, 0x6111, 0x00C6, 0x5081, 0x6111, 0x00C6, 0x5881, 0x6111, 0x00C6, 0x5C81, 0x6111, 0x00C7, 0x5C01, 0xE111, 0x00C7, 0x5801, 0xE011, 0x00C5, 0x501B, 0xE011, 0x00C5, 0x5402, 0xE011, 0x00C5, 0x5018, 0xE011, 0x00C5, 0x5006, 0xE011, 0x00C5, 0x509F, 0x6011, 0x00C5, 0x508B, 0x6011, 0x00C5, 0x5001, 0x6015, 0x0045, 0x5001, 0x6215, 0x006D, 0x5000, 0x5F11, 0x007C
 
REG_BURST = 0x50C0, 0x5001, 0x3F11, 0x007C, 0x5082, 0x3F11, 0x007C, 0x5003, 0x3F11, 0x007C, 0x5005, 0x3F11, 0x007E, 0x5003, 0x3B11, 0x006E, 0x5001, 0x3911, 0x0066, 0x5001, 0x3911, 0x0046, 0x5009, 0x7911, 0x00C6, 0x501F, 0x7111, 0x00C6, 0x501C, 0x7111, 0x00C6, 0x5001, 0x7111, 0x00C6, 0x501D, 0x6111, 0x00C6, 0x5001, 0x6111, 0x00C7, 0x5001, 0xE111, 0x00C7, 0x501F, 0xE011, 0x00C5, 0x500B, 0xE011, 0x00C5, 0x501F, 0x6011, 0x00C5, 0x5019, 0x6011, 0x00C5, 0x5001, 0x6011, 0x00C5, 0x5001, 0x6011, 0x0045, 0x5001, 0x6011, 0x006D, 0x5001, 0x2211, 0x007C, 0x5004, 0x2311, 0x007C, 0x5000, 0x2311, 0x007C
 
REG_BURST = 0x5150, 0x5201, 0x2F11, 0x007C, 0x5382, 0x2F11, 0x007C, 0x5201, 0x2F11, 0x007C, 0x5006, 0x2F11, 0x007C, 0x5005, 0x3F11, 0x007C, 0x5001, 0x3F19, 0x007C, 0x5002, 0x3F1D, 0x007E, 0x5001, 0x3F19, 0x007E, 0x5006, 0x3F11, 0x007E, 0x500B, 0x3F11, 0x005E, 0x5102, 0x3F11, 0x005E, 0x501F, 0x3F11, 0x005E, 0x501A, 0x3F11, 0x005E, 0x501C, 0x2F11, 0x005E, 0x5001, 0x2F11, 0x005E, 0x5801, 0x2F11, 0x005E, 0x5C01, 0x2F11, 0x005F, 0x5C01, 0xAF11, 0x005F, 0x5801, 0xAE11, 0x005D, 0x501B, 0xAE11, 0x005D, 0x5402, 0xAE11, 0x005D, 0x5018, 0xAE11, 0x005D, 0x501F, 0x2E11, 0x005D, 0x5019, 0x2E11, 0x005D, 0x5001, 0x2E11, 0x005D, 0x5001, 0x2E15, 0x005D, 0x5001, 0x2E15, 0x007D, 0x5000, 0x2E11, 0x007C
 
REG_BURST = 0x6000, 0x0002, 0x001C, 0x0001, 0x0000, 0x0004, 0x0160, 0x0041, 0x0160, 0x0042, 0x0160, 0x0043, 0x0160, 0x0042, 0x0060, 0x0042, 0x1060, 0x0001, 0x1060, 0x0001, 0x9060, 0x0002, 0x9060, 0x0006, 0x9060, 0x0081, 0x9060, 0x0081, 0x1060, 0x0022, 0x1060, 0x0028, 0x1060, 0x0001, 0x1020, 0x0001, 0x1000, 0x2001, 0x1000, 0x0002, 0x1000, 0x0008, 0x1200, 0x0003, 0x1000, 0x0002, 0x1004, 0x0001, 0x5000, 0xC001, 0x5002, 0xE001, 0x5002, 0xC001, 0x7002, 0x8001, 0x5002, 0x8001, 0x5002, 0x8901, 0x5002, 0xBE01, 0x5002, 0x8001, 0x7002, 0xC001, 0x5002, 0x4001, 0x5002, 0x4901, 0x5002, 0x7E01, 0x5002, 0x4001, 0x7002, 0x0001, 0x5002, 0x0001, 0x5002, 0x0901, 0x5002, 0x3E01, 0x5002, 0x0001, 0x7002, 0x4001, 0x5002, 0xC001, 0x5001, 0xC901, 0x5001, 0xFE01, 0x5001, 0xC001, 0x7001, 0x8001, 0x5001, 0x8001, 0x5001, 0x8901, 0x5001, 0xBE01, 0x5001, 0x8001, 0x7001, 0xC001, 0x5001, 0x4001, 0x5001, 0x4901, 0x5001, 0x7E01, 0x5001, 0x4001, 0x7001, 0x0001, 0x5001, 0x0001, 0x5001, 0x0901, 0x5001, 0x3E01, 0x5001, 0x0001, 0x5001, 0x8001, 0x5000, 0x0001, 0x1000, 0x0001, 0x100C, 0x0001, 0x106C, 0x001F, 0x1060, 0x0003, 0x1060, 0x0001, 0x1020, 0x0005, 0x1000, 0x8001, 0x5003, 0xA001, 0x1003, 0x8001, 0x1003, 0x8001, 0x1003, 0xC001, 0x1003, 0xC001, 0x3003, 0xC001, 0x1003, 0x4001, 0x1003, 0x4801, 0x1003, 0x4901, 0x1003, 0x7E01, 0x1003, 0x4001, 0x1003, 0x4001, 0x1003, 0x4001, 0x1003, 0x0001, 0x3003, 0x0001, 0x1003, 0x0001, 0x1003, 0x0801, 0x1003, 0x0901, 0x1003, 0x3E01, 0x1003, 0x0001, 0x3003, 0x4001, 0x1003, 0xC001, 0x1002, 0xC801, 0x1002, 0xC901, 0x1002, 0xFE01, 0x1002, 0xC001, 0x3002, 0x8001, 0x1002, 0x8001, 0x1002, 0x8801, 0x1002, 0x8901, 0x1002, 0xBE01, 0x1002, 0x8001, 0x3002, 0xC001, 0x1002, 0x4001, 0x1002, 0x4801, 0x1002, 0x4901, 0x1002, 0x7E01, 0x1002, 0x4001, 0x3002, 0x0001, 0x1002, 0x0001, 0x1002, 0x0801, 0x1002, 0x0901, 0x1002, 0x3E01, 0x1002, 0x0001, 0x3002, 0x4001, 0x1002, 0xC001, 0x1001, 0xC801, 0x1001, 0xC901, 0x1001, 0xFE01, 0x1001, 0xC001, 0x3001, 0x8001, 0x1001, 0x8001, 0x1001, 0x8801, 0x1001, 0x8901, 0x1001, 0xBE01, 0x1001, 0x8001, 0x3001, 0xC001, 0x1001, 0x4001, 0x1001, 0x4901, 0x1001, 0x7E01, 0x1001, 0x4001, 0x3001, 0x0001, 0x1001, 0x0001, 0x1001, 0x0901, 0x1001, 0x3E01, 0x1001, 0x0001, 0x1001, 0x0001, 0x1000, 0x0000, 0x1000
 
REG_BURST = 0x622C, 0x0062, 0x011C, 0x007C, 0x0100, 0x0061, 0x0100, 0x00E2, 0x0100, 0x006C, 0x0100, 0x2061, 0x0100, 0x0062, 0x0100, 0x0068, 0x0300, 0x0063, 0x0100, 0x0062, 0x0104, 0x0061, 0x4100, 0xC061, 0x6102, 0xE061, 0x4102, 0xC062, 0x4102, 0x8061, 0x4102, 0x8961, 0x6102, 0xBE61, 0x4102, 0x8062, 0x4102, 0x4061, 0x4102, 0x4961, 0x6102, 0x7E61, 0x4102, 0x4062, 0x4102, 0x0061, 0x4102, 0x0961, 0x6102, 0x3E61, 0x4102, 0x0062, 0x4102, 0xC061, 0x4101, 0xC961, 0x6101, 0xFE61, 0x4101, 0xC062, 0x4101, 0x8061, 0x4101, 0x8961, 0x6101, 0xBE61, 0x4101, 0x8062, 0x4101, 0x4061, 0x4101, 0x4961, 0x6101, 0x7E61, 0x4101, 0x4062, 0x4101, 0x0061, 0x4101, 0x0961, 0x4101, 0x3E61, 0x4101, 0x0062, 0x4101, 0xC061, 0x4100, 0x0062, 0x010C, 0x007F, 0x0100, 0x006B, 0x0100, 0x8061, 0x4103, 0xA061, 0x0103, 0x8061, 0x0103, 0x8061, 0x2103, 0x8063, 0x0103, 0x4061, 0x0103, 0x4961, 0x0103, 0x7E61, 0x0103, 0x4061, 0x0103, 0x4061, 0x2103, 0x4063, 0x0103, 0x0061, 0x0103, 0x0961, 0x2103, 0x3E61, 0x0103, 0x0062, 0x0103, 0xC061, 0x0102, 0xC961, 0x2102, 0xFE61, 0x0102, 0xC062, 0x0102, 0x8061, 0x0102, 0x8961, 0x2102, 0xBE61, 0x0102, 0x8062, 0x0102, 0x4061, 0x0102, 0x4961, 0x2102, 0x7E61, 0x0102, 0x4062, 0x0102, 0x0061, 0x0102, 0x0961, 0x2102, 0x3E61, 0x0102, 0x0062, 0x0102, 0xC061, 0x0101, 0xC961, 0x2101, 0xFE61, 0x0101, 0xC062, 0x0101, 0x8061, 0x0101, 0x8961, 0x2101, 0xBE61, 0x0101, 0x8062, 0x0101, 0x4061, 0x0101, 0x4961, 0x2101, 0x7E61, 0x0101, 0x4062, 0x0101, 0x0061, 0x0101, 0x0961, 0x0101, 0x3E61, 0x0101, 0x0061, 0x0101, 0x0060, 0x0101
 
 
 
 
;************************************************************************************** 
;************************************************************************************** 
; Configure Sensor's Ouput Interface (HiSPi) 
;************************************************************************************** 
;************************************************************************************** 
 
[Hidden: Enable24lanes] 
; mux mode dependent uploads 
LOG = Loading 24 lanes 12 bit specific settings 
 
REG = 0x3810, 0x00E6 // minimum line time 
REG = 0x3840, 0x0580 
REG = 0x3842, 0x009C 
REG = 0x38C4, 0x1300 
REG = 0x3A00, 0x000A 
REG = 0x3A02, 0x0001 
REG = 0x3E00, 0x0008 
REG = 0x3E28, 0x2507 
REG = 0x3E80, 0x0001
 
[Hidden: Enable18lanes] 
; mux mode dependent uploads 
LOG = Loading 18 lanes 12 bit specific settings 
 
REG = 0x3810, 0x00F4 // minimum line time 
REG = 0x3840, 0x052F 
REG = 0x3842, 0x00D0 
REG = 0x38C4, 0x1200 
REG = 0x3A00, 0x000C 
REG = 0x3A02, 0x0001 
REG = 0x3E00, 0x0006 
REG = 0x3E28, 0x2517 
REG = 0x3E80, 0x0005
 
[Hidden: Enable12lanes] 
; mux mode dependent uploads 
LOG = Loading 12 lanes 12 bit specific settings 
 
REG = 0x3810, 0x016E // minimum line time 
REG = 0x3840, 0x0375 
REG = 0x3842, 0x0055 
REG = 0x38C4, 0x0C00 
REG = 0x3A00, 0x000A 
REG = 0x3A02, 0x0004 
REG = 0x3E00, 0x0002 
REG = 0x3E28, 0x2527 
REG = 0x3E80, 0x0009
 
[Hidden: Enable6lanes] 
; mux mode dependent uploads 
LOG = Loading 6 lanes 12 bit specific settings 
 
REG = 0x3810, 0x02DC // minimum line time 
REG = 0x3840, 0x01BA 
REG = 0x3842, 0x01C4 
REG = 0x38C4, 0x0600 
REG = 0x3A00, 0x000D 
REG = 0x3A02, 0x0001 
REG = 0x3E00, 0x0001 
REG = 0x3E28, 0x2537 
REG = 0x3E80, 0x000D
 
[Hidden: Enable24lanesCompanding] 
LOG = Loading 24 lanes companding specific settings  
 
REG = 0x3502, 0x304B 
REG = 0x3810, 0x00E6 // minimum line time 
REG = 0x3840, 0x0580 
REG = 0x3842, 0x009C 
REG = 0x38C4, 0xAF00 
REG = 0x3A00, 0x000A 
REG = 0x3A02, 0x0001 
REG = 0x3E00, 0x0009 
REG = 0x3E28, 0x2407 
REG = 0x3E2E, 0x0001 
REG = 0x3E80, 0x0001 
 
[Hidden: Enable18lanesCompanding] 
LOG = Loading 18 lanes companding specific settings  
 
REG = 0x3502, 0x304B 
REG = 0x3810, 0x00E6 // minimum line time 
REG = 0x3840, 0x0580 
REG = 0x3842, 0x009C 
REG = 0x38C4, 0xAF00 
REG = 0x3A00, 0x000C 
REG = 0x3A02, 0x0001 
REG = 0x3E00, 0x0008 
REG = 0x3E28, 0x2417 
REG = 0x3E2E, 0x0001 
REG = 0x3E80, 0x0005 
 
 
[Hidden: Enable12lanesCompanding]  
LOG = Loading 12 lanes companding specific settings  
 
REG = 0x3502, 0x304B 
REG = 0x3810, 0x0131 // minimum line time 
REG = 0x3840, 0x0426 
REG = 0x3842, 0x0056 
REG = 0x38C4, 0xAF00 
REG = 0x3A00, 0x000A 
REG = 0x3A02, 0x0004 
REG = 0x3E00, 0x0003 
REG = 0x3E28, 0x2427 
REG = 0x3E2E, 0x0001 
REG = 0x3E80, 0x0009 
 
[Hidden: Enable6lanesCompanding]  
LOG = Loading 6 lanes companding specific settings  
 
REG = 0x3502, 0x304B 
REG = 0x3810, 0x0262 // minimum line time 
REG = 0x3840, 0x0213 
REG = 0x3842, 0x0056 
REG = 0x38C4, 0xAF00 
REG = 0x3A00, 0x000D 
REG = 0x3A02, 0x0001 
REG = 0x3E00, 0x0003 
REG = 0x3E28, 0x2437 
REG = 0x3E2E, 0x0001 
REG = 0x3E80, 0x000D 
 
[Hidden: Enable24lanes10bit] 
; mux mode dependent uploads 
LOG = Loading 24 lanes 10 bit specific settings 
 
REG = 0x3810, 0x00D0 // minimum line time 
REG = 0x3840, 0x0615 
REG = 0x3842, 0x008C 
REG = 0x38C4, 0x1500 
REG = 0x3A00, 0x0009 
REG = 0x3E00, 0x0009 
REG = 0x3E28, 0x2407 
REG = 0x3E80, 0x0001
 
[Hidden: Enable18lanes10bit] 
; mux mode dependent uploads 
LOG = Loading 18 lanes 10 bit specific settings 
 
REG = 0x3810, 0x00D0 // minimum line time 
REG = 0x3840, 0x0615 
REG = 0x3842, 0x008C 
REG = 0x38C4, 0x1500 
REG = 0x3A00, 0x000C 
REG = 0x3E00, 0x0008 
REG = 0x3E28, 0x2417 
REG = 0x3E80, 0x0005
 
[Hidden: Enable12lanes10bit] 
; mux mode dependent uploads 
LOG = Loading 12 lanes 10 bit specific settings 
 
REG = 0x3810, 0x0131 // minimum line time 
REG = 0x3840, 0x0426 
REG = 0x3842, 0x0056 
REG = 0x38C4, 0x0E00 
REG = 0x3A00, 0x0009 
REG = 0x3E00, 0x0003 
REG = 0x3E28, 0x2427 
REG = 0x3E80, 0x0009
 
[Hidden: Enable6lanes10bit] 
; mux mode dependent uploads 
LOG = Loading 6 lanes 10 bit specific settings 
 
REG = 0x3810, 0x0262 // minimum line time 
REG = 0x3840, 0x0213 
REG = 0x3842, 0x0056 
REG = 0x38C4, 0x0700 
REG = 0x3A00, 0x0013 
REG = 0x3E00, 0x0003 
REG = 0x3E28, 0x2437 
REG = 0x3E80, 0x000D
 
[Hidden: Enable_X-Cube] 
OPTION = User Toolbar 2 Show , 1 
; Enable12lanes adjusted for MVRM platform (increased line & frame time)  
REG = 0x3810, 0x0404 // Line Time MV Ref Module for 20 fps @ 12 Mp 
REG = 0x383A, 0x0C24 // Matching Fr_length for 20 fps @ 12 Mp 
REG = 0x3840, 0x0627 // integration time = 25 ms (coarse) 
REG = 0x3842, 0x0384 // integration time = 25 ms (fine) 
 
REG = 0x38C4, 0x0C00 
 
REG = 0x3A00, 0x000A 
REG = 0x3A02, 0x0004 
 
REG = 0x3E00, 0x0002 
REG = 0x3E28, 0x2525 
REG = 0x3E80, 0x0009 
 
REG = 0x38EA, 0x0050 
REG = 0x38EC, 0x0050 
REG = 0x38EE, 0x0050 
 
LOAD = Setup_X-Cube 
 
 
 
;************************************************************************************** 
;************************************************************************************** 
; Sensor Operation Modes 
;************************************************************************************** 
;************************************************************************************** 
 
[python: Short_Integration_Config] 
# Depending on the mux mode, another FSM timing will be used to reach a minimum of 10us integration time.# Please use this configuration only for short integration times 
# In this mode the shutter line artefact may appear. (When using triggered mode while pipelining) Please take a look at the developer guide for more information and other possible work arounds. 
# Store number of lanes in a variable to do the correct uploads 
lanes = apbase.getstate('RX Lanes') 
bitdepth = apbase.getstate('BitDepth Decomp') 
apbase.log("Short Integration Config selected for " + str(lanes) + " lanes and " + str(bitdepth) + " bit") 
 
reg.reg(0x38CA).value = 0x0404 
reg.reg(0x38CC).value = 0x0004 
 
#24 lanes & 12 bit 
if (lanes == 24) & (bitdepth == 12):  
    reg.reg(0x38EA).value = 0x0046 
    reg.reg(0x38EC).value = 0x0046 
    reg.reg(0x38EE).value = 0x0046 
 
#12 lanes & 12 bit 
if (lanes == 12) & (bitdepth == 12):  
    reg.reg(0x38EA).value = 0x0050 
    reg.reg(0x38EC).value = 0x0050 
    reg.reg(0x38EE).value = 0x0050 
 
#6 lanes & 12 bit 
if (lanes == 6) & (bitdepth == 12):  
    reg.reg(0x38EA).value = 0x0059 
    reg.reg(0x38EC).value = 0x0059 
    reg.reg(0x38EE).value = 0x0059 
 
#18 lanes & 12 bit 
if (lanes == 18) & (bitdepth == 12):  
    reg.reg(0x38EA).value = 0x0064 
    reg.reg(0x38EC).value = 0x0064 
    reg.reg(0x38EE).value = 0x0064 
 
#24 lanes & 10 bit 
if (lanes == 24) & (bitdepth == 10):  
    reg.reg(0x38EA).value = 0x0046 
    reg.reg(0x38EC).value = 0x0046 
    reg.reg(0x38EE).value = 0x0046 
 
#12 lanes & 10 bit 
if (lanes == 12) & (bitdepth == 10):  
    reg.reg(0x38EA).value = 0x0050 
    reg.reg(0x38EC).value = 0x0050 
    reg.reg(0x38EE).value = 0x0050 
 
#6 lanes & 10 bit 
if (lanes == 6) & (bitdepth == 10):  
    reg.reg(0x38EA).value = 0x0059 
    reg.reg(0x38EC).value = 0x0059 
    reg.reg(0x38EE).value = 0x0059 
 
#18 lanes & 10 bit 
if (lanes == 18) & (bitdepth == 10):  
    reg.reg(0x38EA).value = 0x0064 
    reg.reg(0x38EC).value = 0x0064 
    reg.reg(0x38EE).value = 0x0064 
 
[Hidden: 10fps_X-Cube] 
; MVRM: set line and frame time for 10 fps with Tint = 25 ms @ 12 Mp 
ERROR_IF = HISPI_CONTROL_COMMON_REG, OUTPUT_MSB_FIRST, != 0, "X-Cube is not selected as the product, this preset is meaningless here" 
 
PYTHON = devware.stop(True) 
BITFIELD = 0x3800 , 0x0001, 0 //disable sequencer 
REG = 0x3810, 0x080C // Line Time MV Ref Module for 20 fps @ 12 Mp 
REG = 0x383A, 0x0C24 // Matching Fr_length for 10 fps 
REG = 0x3840, 0x0624 // integration time = 25 ms (coarse) 
REG = 0x3842, 0x0690 // integration time = 25 ms (fine) 
REG = 0x381A, 0x0000 // set full 12Mp 
REG = 0x381C, 0x0302 // set full 12Mp 
BITFIELD = 0x3800 , 0x0001, 1 //enable sequencer 
PYTHON = devware.stop(False) 
 
[Hidden: 20fps_X-Cube] 
; MVRM: set line and frame time for 20 fps with Tint = 25 ms @ 12 Mp 
ERROR_IF = HISPI_CONTROL_COMMON_REG, OUTPUT_MSB_FIRST, != 0, "X-Cube is not selected as the product, this preset is meaningless here" 
 
PYTHON = devware.stop(True) 
BITFIELD = 0x3800 , 0x0001, 0 //disable sequencer 
REG = 0x3810, 0x0404 // Line Time MV Ref Module for 20 fps @ 12 Mp 
REG = 0x383A, 0x0C24 // Matching Fr_length for 20 fps @ 12 Mp 
REG = 0x3840, 0x0627 // integration time = 25 ms (coarse) 
REG = 0x3842, 0x0384 // integration time = 25 ms (fine) 
REG = 0x381A, 0x0000 // set full 12Mp 
REG = 0x381C, 0x0302 // set full 12Mp 
BITFIELD = 0x3800 , 0x0001, 1 //enable sequencer 
PYTHON = devware.stop(False) 
 
[Hidden: 30fps_X-Cube] 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
; NOT SUPPORTED ON DEMO3 BOARD (MIPI BANDWIDTH LIMITATION) ; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
; MVRM: set line and frame time for 30 fps with Tint = 25 ms @ 12 Mp 
ERROR_IF = HISPI_CONTROL_COMMON_REG, OUTPUT_MSB_FIRST, != 0, "X-Cube is not selected as the product, this preset is meaningless here" 
 
PYTHON = devware.stop(True) 
BITFIELD = 0x3800 , 0x0001, 0 //disable sequencer 
REG = 0x3810, 0x03CB // Line Time MV Ref Module for 30 fps @ 12 Mp 
REG = 0x383A, 0x0C24 // Matching Fr_length for 30 fps @ 12 Mp 
REG = 0x3840, 0x07D2 // integration time = 25 ms (coarse) 
REG = 0x3842, 0x003A // integration time = 25 ms (fine) 
REG = 0x381A, 0x0000 // set full 12Mp 
REG = 0x381C, 0x0302 // set full 12Mp 
BITFIELD = 0x3800 , 0x0001, 1 //enable sequencer 
PYTHON = devware.stop(False) 
 
[Hidden: 30fps_X-Cube_4K] 
; MVRM: set line and frame time for 30 fps with Tint = 30 ms @ 4K UHD 
ERROR_IF = HISPI_CONTROL_COMMON_REG, OUTPUT_MSB_FIRST, != 0, "X-Cube is not selected as the product, this preset is meaningless here" 
 
PYTHON = devware.stop(True) 
BITFIELD = 0x3800 , 0x0001, 0 //disable sequencer 
REG = 0x3810, 0x03CB // Line Time MV Ref Module for 30 fps @ 4K 
REG = 0x383A, 0x0893 // Matching Fr_length for 30 fps @ 4K 
REG = 0x3840, 0x07D2 // integration time = 25 ms (coarse) 
REG = 0x3842, 0x003A // integration time = 25 ms (fine) 
REG = 0x381A, 0x0072 // vertically center 4K window 
REG = 0x381C, 0x021E // set 4K UHD height 
BITFIELD = 0x3800 , 0x0001, 1 //enable sequencer 
PYTHON = devware.stop(False) 
[Hidden: empty]  
 
 
 
;************************************************************************************** 
;************************************************************************************** 
; Helper Functions 
;************************************************************************************** 
;************************************************************************************** 
 
[Hidden: Zoom.25X] 
STATE= Display Zoom Percent, 25 
[Hidden: Zoom1X] 
STATE= Display Zoom Percent, 100 
[Hidden: Zoom4X] 
STATE= Display Zoom Percent, 400 
 
[Hidden: EnableMonitorPins] 
; configure sensor's monitor outputs: 
;	- MONITOR0 = HIGH during "real" integration  
;	- MONITOR1 = HIGH during black/reference line readout (M-region) 
;	- MONITOR2 = HIGH during image line readout (effective ROI) 
LOG = Enabling monitor pins  
REG = 0x3602, 0x0092 
REG = 0x3806, 0x5666 
 
[Hidden: DisableMonitorPins] 
; disable signal output on monitor pins 
LOG = Disabling monitor pins  
REG = 0x3602, 0x0000 
REG = 0x3806, 0x0000 
 
[Sensor Hard Reset] 
PYTHON = devware.stop(True) 
STATE = Sensor Reset, 1 // Activate RESET_B signal 
DELAY = 30 
STATE = Sensor Reset, 0 // Deactivate RESET_B signal 
DELAY = 30 
PYTHON = devware.stop(False) 
LOG = Sensor hard reset complete! 
 
[Hidden: PwrCycle]  
;PROMPT = "Power cycling the sensor board will reset all registers. Press OK to continue, Close this window to abort"  
LOG = Power cycling sensor boards...  
STATE = Sensor Reset, 1 // Activate RESET_B signal  
DELAY = 30 
STATE = Sensor Power, 0 // Power Down Sensor Board  
DELAY = 10 
SERIAL_REG = 0xCE, 0x0, 0x1 // Toggling FBD Board Reset 
DELAY = 10 
SERIAL_REG = 0xCE, 0x0, 0x0 // Toggling FBD Board Reset 
DELAY = 10 
STATE = Sensor Power, 1 // Power Up Sensor Board  
DELAY = 30 
STATE = Sensor Reset, 0 // Deactivate RESET_B signal  
DELAY = 330 
LOG = Power cycling complete! 
 
[Hidden: Show Black Reference] 
; Show Black Reference Pixels 
STATE = Active Area Crop, 0 
 
[Hidden: Hide Black Reference] 
; Hide Black Reference Pixels 
STATE = Active Area Crop, 1 
 
[Hidden: Setup_X-Cube] 
; Prepare DW for MVRM MIPI interface vs FBD HiSPi interface (default: FBD) 
SENSOR_BASE = 0x20 
STATE = Descramble Mode, 0 
STATE = Product Variant, X-Cube 
STATE = RX Type, 3 
STATE = RX Lanes, 4 
STATE = RX Sync Code, 934 
 
[Hidden: python: X-Cube_bugfix] 
import time 
# toggling trigger solves bright pixel (sampling?) bug. **** To be investigated **** 
if apbase.getstate("Product Variant") == "X-Cube": 
   apbase.log("Toggling Trigger...") 
   #[Trigger_Enable/set Trigger (SP4) to LOW] 
   apbase.Camera().setgpio(4, 0) 
   time.sleep(0.1) 
   #[Trigger_Enable/set Trigger (SP4) to high] 
   apbase.Camera().setgpio(4, 1) 
 
[Hidden: python: check_color]  
# Use in sensor register 0x3012[1:0] in the future to check for color or mono device 
if apbase.getstate("Monochrome") != 1:  
   apbase.log("Color device selected")  
   reg.reg(0x3800).bitfield(0x02).value = 1 
   apbase.load_preset("Setup_Color_Pipe")  
else:  
  apbase.log("Mono device selected") 
  reg.reg(0x3800).bitfield(0x02).value = 0 
  apbase.setstate("Color Correction", 0)  
 
[Setup_Color_Pipe] 
; Setup DevWare's basic color processing functions (demosaic, AWB...) 
;STATE = Auto Offset, 0 //disable DW's auto Bayer pattern placement detection 
;STATE = X Offset, 1 //manually select correct Bayer pattern placement (pixel(0,0) = red) 
;STATE = Y Offset, 0 //manually select correct Bayer pattern placement (pixel(0,0) = red) 
STATE = WB Adjust Gains, 0 
STATE = Color Correction, 1  
STATE = White Balance, 1  
STATE = AWB Incandescent, 1.6637 -0.3802 -0.2835 -0.3523 1.0374 0.3149 -0.1224 -0.7913 1.9137  
STATE = AWB Incandescent Gain, 0.6890 2.8520  
STATE = AWB Incandescent Temp, 2500  
STATE = AWB Middle, 1.7084 -0.4617 -0.2467 -0.3640 1.2551 0.1089 -0.0315 -0.4440 1.4756  
STATE = AWB Middle Gain, 1.1740 2.3540  
STATE = AWB Middle Temp, 3431  
STATE = AWB Sun, 1.5626 -0.2556 -0.3070 -0.2841 1.4050 -0.1209 0.0067 -0.3339 1.3272  
STATE = AWB Sun Gain, 1.2550 1.0860  
STATE = AWB Sun Temp, 6500  
STATE = AWB Weight Map Method, 2 
STATE = AWB Weight Map, 0 17 29202 28928 0 369 10098 28928 0 16 273 8448 0 272 1 30480 1 10097 0 4352 4391 29473 257 4369 30583 30503 10023 30583 30583 30519 8449 4983  
STATE = AWB Weight Map X Scale, 132  
STATE = AWB Weight Map Y Scale, 158  
STATE = AWB Weight Map X Shift, 31  
STATE = AWB Weight Map Y Shift, 12  
STATE = AWB Weight Map X Center, -6  
STATE = AWB Weight Map Y Center, -30  
STATE = AWB Weight Map Angle Sin, 55  
STATE = AWB Weight Map Angle Cos, 33  
STATE = AWB Weight Map Luma Low, 4  
STATE = AWB Weight Map Luma High, 251 
