<?xml version="1.0" encoding="UTF-8"?>
<com.matrox.fdk.editor.registerfile:RegisterFile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:com.matrox.fdk.editor.registerfile="http:///com/matrox/fdk/editor/registerfile.ecore" hasGuiWarnings="false" registersDataBusWidth="32" registersAddressBusWidth="11" name="regfile_xgs_athena">
  <registerFileAbstractNodes xsi:type="com.matrox.fdk.editor.registerfile:Section" name="SYSTEM" endAddress="C">
    <registers name="TAG">
      <fields name="VALUE" alias="Tag identifier" description="" size="24" valueAtReset="58544d" readWrite="false" staticVal="true">
        <possibleValues>&lt;matrox_column_delimiter>value=5788749&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>MTX ASCII string &lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="VERSION" alias="Register file version" description="Revisions&#xD;&#xA;1.3.x : First functionnal revision with a single list of multiple Ethernet frames&#xD;&#xA;1.4.x : Second revision. Implements multiple list of frames" offsetFromParent="4">
      <fields name="MAJOR" lsb="16" size="8" readWrite="false" staticVal="true"/>
      <fields name="MINOR" lsb="8" size="8" valueAtReset="1" readWrite="false" staticVal="true"/>
      <fields name="HW" size="8" readWrite="false" staticVal="true"/>
    </registers>
    <registers name="CAPABILITY" alias="Register file version" offsetFromParent="8">
      <fields name="VALUE" size="8" readWrite="false" staticVal="true"/>
    </registers>
    <registers name="SCRATCHPAD" alias="Register file version" offsetFromParent="C">
      <fields name="VALUE" size="32"/>
    </registers>
  </registerFileAbstractNodes>
  <registerFileAbstractNodes xsi:type="com.matrox.fdk.editor.registerfile:Section" name="DMA" baseAddress="70" endAddress="A4">
    <registers name="CTRL" alias="Initial Grab Address Register " description="Initial Grab Address LOW 32 bits" useReservedSpaceBelow="true" address="108">
      <fields name="GRAB_QUEUE_EN" alias="" description="" readOnlyMsb="2">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="FSTART" alias="Initial Grab Address Register " description="Initial Grab Address LOW 32 bits" offsetFromParent="8" address="108">
      <fields name="VALUE" alias="INitial GRAb ADDRess Register" description="This is the address in the host ram where the grab engine will start writing pixel data.  " size="32" readOnlyMsb="2">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="FSTART_HIGH" alias="Initial Grab Address Register HI 32 bits" description="Initial Grab Address HI 32 bits" offsetFromParent="C">
      <fields name="VALUE" alias="INitial GRAb ADDRess Register High" description="This is the high 32 bits of the 64-bit addresess in the host ram where the grab engine will start writing pixel data." size="32" readOnlyMsb="12">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="FSTART_G" alias="Green Grab Address Register " description="Grab Address LOW 32 bits for the Green plane.  Only used when grabbing in Planar mode." offsetFromParent="10" address="108">
      <fields name="VALUE" alias="GRAb ADDRess Register" description="This is the address in the host ram where the grab engine will start writing pixel data.  " size="32" readOnlyMsb="2">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="FSTART_G_HIGH" alias="Green Grab Address Register HIGH 32 bits" description="Green Grab Address HIGH 32 bits" offsetFromParent="14">
      <fields name="VALUE" alias="GRAb ADDRess Register High" description="This is the high part of the 64-bit addresess in the host ram where the grab engine will start writing pixel data. &#xD;&#xA;&#xD;&#xA;" size="32" readOnlyMsb="12">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Any value&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="FSTART_R" alias="Red Grab Address Register " description="Grab Address LOW 32 bits for the Red plane.  Only used when grabbing in Planar mode." offsetFromParent="18" address="108">
      <fields name="VALUE" alias="GRAb ADDRess Register" description="This is the address in the host ram where the grab engine will start writing pixel data.  " size="32" readOnlyMsb="2">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Any value&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="FSTART_R_HIGH" alias="Red Grab Address Register HIGH 32 bits" description="Red Grab Address HIGH 32 bits" offsetFromParent="1C" numberOfReservedSpacesBelow="2">
      <fields name="VALUE" alias="GRAb ADDRess Register High" description="This is the high part of the 64-bit addresess in the host ram where the grab engine will start writing pixel data. &#xD;&#xA;&#xD;&#xA;" size="32" readOnlyMsb="12">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Any value&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="LINE_PITCH" alias="Grab Line Pitch Register" description="Grab Line Pitch Register" offsetFromParent="20" address="110">
      <fields name="VALUE" alias="Grab LinePitch" description="This is the line pitch when writing in ram. It is measured in bytes, not pixels.  " size="16" readOnlyMsb="2">
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="LINE_SIZE" alias="Host Line Size Register" description="Host Line Size Register." offsetFromParent="24" address="110">
      <fields name="VALUE" alias="Host Line size" description="This is the line size when writing in host ram. It is measured in bytes, not pixels.  If this register is higher than the actual data provided by the sensor, stray data will be written into host memory.  If this register is lower than the data provided by the sensor, image data will be cropped at the end of the line.&#xD;&#xA;&#xD;&#xA;For backward compatibility, the value of 0 indicates that the FPGA should auto-compute the line sized based on data provided by the sensor interface." size="14" readOnlyMsb="2">
        <possibleValues>&lt;matrox_column_delimiter>range=1-16383&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Written line size in host frame.&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Auto-compute line size from sensor data.&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="CSC" offsetFromParent="28" useReservedSpaceBelow="true" numberOfReservedSpacesBelow="3">
      <fields name="COLOR_SPACE" description="Output color space used to transfer data to the DMA engine. " lsb="24" size="3">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Reserved for Mono sensor operation&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>BGR32&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=2&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>YUV 4:2:2 in full range&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=3&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Planar 8-bits&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=4&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Reserved for Y only with color sensor&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=5&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>RAW color pixels (8bpp or 10bpp selected with  MONO10 regsiter)&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="DUP_LAST_LINE" description="This field is used to enable the duplicate last line feature.  When turned on, the datapath will regenerate the last line when it receives the end of frame marker from the acquisition section.&#xD;&#xA;&#xD;&#xA;The goal of this feature is to compensate for the lost line during the Bayer demosaic processing." lsb="23">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>normal processing&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>last line is duplicated&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="REVERSE_Y" alias="REVERSE Y " description="Reverse readout" lsb="9">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Bottom to top readout&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Top to bottom readout&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="REVERSE_X" lsb="8"/>
    </registers>
  </registerFileAbstractNodes>
  <registerFileAbstractNodes xsi:type="com.matrox.fdk.editor.registerfile:Section" name="ACQ" baseAddress="100" endAddress="2D8">
    <registers name="GRAB_CTRL" alias="GRAB ConTRoL Register" description="Grag Control Register" useReservedSpaceBelow="true" address="118">
      <fields name="RESET_GRAB" description="This register resets the entire python_ctrl." lsb="31">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Reset not active&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Reset active&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="GRAB_ROI2_EN" description="Enable the second ROI  on the frame (KNS). This register is not DB.&#xD;&#xA;1) No Y overlap is allowed&#xD;&#xA;2) Xsize must be the same for the two ROI for the moment(DMA constraint).&#xD;&#xA;3) EOF and SOF in between the two in-frame ROIs will be masked to the DMA. The DMA will see one frame, with the two ROI inside.&#xD;&#xA;" lsb="29">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Dual ROI disable&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Dual ROI enable&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="ABORT_GRAB" alias="ABORT GRAB" description="This is the grab Abort signal, it will reset all the grab queued." lsb="28" readWrite="false" writeOnly="true" readOnlyMsb="5">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Normal operation&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Reset Grab&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="TRIGGER_OVERLAP_BUFFn" description="NOT FULLY VALIDATED. &#xD;&#xA;DON'T USE.&#xD;&#xA;SET IT TO '0'." lsb="16">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Buffer the trigger received during the dead window in PET mode and execute&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>The trigger will be ignored during dead window in PET mode.&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="TRIGGER_OVERLAP" description="This field enables the trigger overlap. In this mode the exposure and the readout of the sensor can be done in parallel for higher framerates." lsb="15" valueAtReset="1">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Trigger Overlap disable&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Trigger Overlap enable (default)&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="TRIGGER_ACT" alias="TRIGGER ACTivation" description="This is the trigger activation . This register selects the activation of the trigger when the trigger source is set to Hardware Snapshop mode . &#xD;&#xA;This register is Double Buffered, so the trigger activation may change from one grab command to another.&#xD;&#xA;&#xD;&#xA;In activation Level HI/LO with EXPOSURE_MODE register set to Timed, the camera will be triggered in continuous way if the level of the external trigger remains at the LEVEL programmed in this register.&#xD;&#xA;&#xD;&#xA;In activation Level HI/LO with EXPOSURE_MODE register set to Trigger Width, the Exposure time will be set by the level of the trigger input. The FPGA exposure regsiters will be ignored. The Dual and Triple slope are not supported in the mode." lsb="12" size="3">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Rising edge&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Falling edge&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=2&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Rising or Falling edge&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=3&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Level HI &lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=4&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Level LO&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=5&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Internal Programmable Timer Trigger&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=6&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>RESERVED&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=7&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>RESERVED&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="TRIGGER_SRC" alias="TRIGGER SouRCe" description="This is the trigger source. This register selects the source of the grab trigger. This register is Double Buffered, so the trigger source may change from one grab command to another. &#xD;&#xA;TRIGGER_SRC(1) may be seen as a TRIGGER_STATE by the software driver.&#xD;&#xA;" lsb="8" size="3">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>RESERVED&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Immediate mode (Continuous)&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=2&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Hardware Snapshop mode&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=3&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Software Snapshot mode&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=4&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>SFNC mode (auto trig)&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="GRAB_SS" alias="GRAB Software Snapshot" description="This is the software snapshot register when the trigger source selected is Software Snapshot mode." lsb="4" readWrite="false" writeOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Idle&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Start a grab&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="BUFFER_ID" description="This is the ID of the DMA parameters to associate with this grab command." lsb="1"/>
      <fields name="GRAB_CMD" alias="GRAB CoMmanD" description="This is MIL GRAB command.  &#xD;&#xA;&#xD;&#xA;When the trigger source is set to Immediate mode(Continuous), an exposure sequence will be automatically executed. When the trigger source is set to Software Snapshop mode or Hardware Snapshop mode, GRAB_CMD will act as an ARM.&#xD;&#xA;&#xD;&#xA;The GRAB_CMD will take around 13 clks to reccord the grab parametters to the SPI fifo. The GRAB_CMD_DONE register may be readed to avoid fifo corruption before sending another Grab command instruction." readWrite="false" writeOnly="true" readOnlyMsb="16">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Idle&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Start grab command&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="GRAB_STAT" offsetFromParent="8" useReservedSpaceBelow="true">
      <fields name="GRAB_CMD_DONE" alias="GRAB CoMmanD DONE" description="The GRAB_CMD will take around 13 clks to reccord the grab parametters to the SPI fifo. This register may be readed to avoid fifo corruption before sending another Grab command instruction.&#xD;&#xA;" lsb="31" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Grab Command in process&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Grab command idle&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="ABORT_PET" alias="ABORT during PET" description="This is the ABORT PET flag. It is set to '1' when an abort is detected in the PETengin phase of the trigger. It is set back to '0' when ABORT_DONE is set to '1'." lsb="30" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Abort in PET Phase idle&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Abort in PET Phase active&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="ABORT_DELAI" description="This is the ABORT DELAI flag. It is set to '1' when an abort is detected in the delai phase of the trigger. It is set back to '0' when ABORT_DONE is set to '1'." lsb="29" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Abort in Delai Phase idle&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Abort in Delai Phase active&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="ABORT_DONE" alias="ABORT is DONE" description="This read-only field indicates the RESET_GRAB command status. If 0, an abort sequence is executing." lsb="28" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Abort sequence not finished yet&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Abort DONE, or not started (reset value)&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="TRIGGER_RDY" lsb="24" readWrite="false" readOnly="true"/>
      <fields name="ABORT_MNGR_STAT" description="DEBUG ABORT MANAGER STATE MACHINE" lsb="20" size="3" readWrite="false" readOnly="true"/>
      <fields name="TRIG_MNGR_STAT" description="DEBUG TRIGGER MANAGER STATE MACHINE" lsb="16" size="4" readWrite="false" readOnly="true"/>
      <fields name="TIMER_MNGR_STAT" description="DEBUG TIMER MANAGER STATE MACHINE" lsb="12" size="3" readWrite="false" readOnly="true"/>
      <fields name="GRAB_MNGR_STAT" description="DEBUG GRAB MANAGER STATE MACHINE" lsb="8" size="4" readWrite="false" readOnly="true"/>
      <fields name="GRAB_FOT" alias="GRAB Field Overhead Time" description="This is the sensor FOT (Field Overhead Time). " lsb="6" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Not in FOT&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>In FOT&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="GRAB_READOUT" description="This is the sensor readout status. It goes to '1' on the SO_FOT and goes to '0' when the datapath decoder decodes the end of frame." lsb="5" readWrite="false" readOnly="true"/>
      <fields name="GRAB_EXPOSURE" description="This is the sensor integration status" lsb="4" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Idle&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Integrating&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="GRAB_PENDING" description="Grab pending status. When this register is set to one, a second grab command is queued in the fpga." lsb="2" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>No grab pending&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Grab pending&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="GRAB_ACTIVE" description="Grab active status. When this register is set to one, at least one grab command has been received." lsb="1" readWrite="false" readOnly="true"/>
      <fields name="GRAB_IDLE" description="GRAB IDLE status. When this register is set to '1', The grab engin is in idle state.&#xD;&#xA;&#xD;&#xA;" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Grab is in proccess&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Grab is Idle&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="READOUT_CFG1" offsetFromParent="10">
      <fields name="FOT_LENGTH_LINE" alias="Frame Overhead Time LENGTH LINE" description="This is the length of the Frame Overhead Time in line_time unit. &#xD;&#xA;&#xD;&#xA;" lsb="24" size="5">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Any 16 bit value&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="EO_FOT_SEL" description="This selector selects who will generate the EO_FOT in the controller. &#xD;&#xA;When select 0, the EO_FOT is the falling edge detection of the monitor FOT.&#xD;&#xA;When select 1, the EO_FOT will be generated inside the controller with programmed FOT_LENGTH." lsb="16"/>
      <fields name="FOT_LENGTH" alias="Frame Overhead Time LENGTH" description="This is the length of the Frame Overhead Time in sys clock. This register is calculated from FOT_LENGTH_LINE and LINE_TIME. It is used when EO_FOT_SEL is set to 1.&#xD;&#xA;&#xD;&#xA;" size="16">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Any 16 bit value&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="READOUT_CFG_FRAME_LINE" offsetFromParent="14">
      <fields name="DUMMY_LINES" description="Number of lines to add in the readout (to debug XGS)" lsb="16" size="8"/>
      <fields name="CURR_FRAME_LINES" description="Current number of lines in the readout calculated by the XGS controller (without FOT)." size="13" readWrite="false" readOnly="true"/>
    </registers>
    <registers name="READOUT_CFG2" offsetFromParent="18" useReservedSpaceBelow="true">
      <fields name="READOUT_LENGTH" description="This is the readout length register. This register is calculated by the FPGA in the IRIS4 projectand gives the readout lenght without the FOT. This register will depend on the ROI, and Subsampling mode. It is used in the PET engin calculations. In Sys_Clock domain." size="29" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Any 24 bits value&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="READOUT_CFG3" offsetFromParent="20">
      <fields name="LINE_TIME" alias="LINE TIME" description="This register definel the length of one line of the sensor. It includes blanking and valid time . Line Time Unit is SENSOR Clock Cycles" size="16" valueAtReset="16e">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter> between 1 and 255&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="READOUT_CFG4" offsetFromParent="24">
      <fields name="KEEP_OUT_TRIG_ENA" description="KEEPOUT zone TRIGger ENAble. When this register is enabled, then the trigger output will be synchronized with the line_int(monitor2) signal from the XGS sensor.&#xD;&#xA;To configure this keep out  zone, use register READOUT_CFG4." lsb="16"/>
      <fields name="KEEP_OUT_TRIG_START" description="During the line time, this register indicates the start of the trigger keep-out  zone." size="16" valueAtReset="ffff"/>
    </registers>
    <registers name="EXP_CTRL1" offsetFromParent="28" useReservedSpaceBelow="true">
      <fields name="EXPOSURE_LEV_MODE" alias="EXPOSURE LEVel MODE" description="This is the exposure level mode selector. When selecting the TRIGGER ACTIVATION = Level Mode, this register selects the exposure method used. When this register is set to '0' the timed mode is selected; Register EXPOSURE_SS is used for the exposure time. When this register is set to '1' the external trigger width  is used for the exposure time. " lsb="28">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Timed Mode&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Trigger Width&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="EXPOSURE_SS" alias="EXPOSURE Single Slope" description="This is the total exposure time in single/dual/triple slope mode.&#xD;&#xA;&#xD;&#xA;This register is double buffered." size="28">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Any 28 bits value&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="EXP_CTRL2" offsetFromParent="30" useReservedSpaceBelow="true">
      <fields name="EXPOSURE_DS" alias="EXPOSURE Dual " description="This is a new 3d profiler feature&#xD;&#xA;We will be able to program upto 3 diferent exposure times (using unused multiSlope registers)&#xD;&#xA;Then we will be able to sequence those exposure times . Selection is made with input exposure_select." size="28">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Any 28 bits value&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="EXP_CTRL3" offsetFromParent="38" useReservedSpaceBelow="true">
      <fields name="EXPOSURE_TS" alias="EXPOSURE Tripple " description="This is a new 3d profiler feature&#xD;&#xA;We will be able to program upto 3 diferent exposure times (using unused multiSlope registers)&#xD;&#xA;Then we will be able to sequence those exposure times . Selection is made with input exposure_select." size="28">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Any 28 bits value&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="TRIGGER_DELAY" offsetFromParent="40" useReservedSpaceBelow="true">
      <fields name="TRIGGER_DELAY" alias="TRIGGER DELAY" description="This is the trigger delay. This trigger delay can be applied to HW(Only edge mode), SW and Continuous mode.&#xD;&#xA;&#xD;&#xA;In HW level mode, the trigger cannot be delayed, since the level time represents the exposure time. &#xD;&#xA;&#xD;&#xA;This register is double buffered" size="28">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Any 28 bits value&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="STROBE_CTRL1" offsetFromParent="48" useReservedSpaceBelow="true">
      <fields name="STROBE_E" alias="STROBE Enable" description="This register enables the strobe logic.&#xD;&#xA;&#xD;&#xA;For Nexis 3 systems, to enable STROBE_A signal, STROBE_E and STROBE_A_EN must be enabled.&#xD;&#xA;For Nexis 3 systems, to enable STROBE_B signal, STROBE_E and STROBE_B_EN must be enabled.&#xD;&#xA;&#xD;&#xA;For Nexis 3 systems, STROBE_A and STROBE B can be activated at the same time, in this case the two strobes will be the same as they share the same programmation.&#xD;&#xA;&#xD;&#xA;This register is double buffered" lsb="31">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Strobe disabled&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Strobe enabled&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="STROBE_POL" alias="STROBE POLarity" description="This is the strobe polarity at the pin of the FPGA only for GTR systems. &#xD;&#xA;&#xD;&#xA;For NEXIS3 systems use register ANPUT\IO\IO_OUT_POL\OUTx_POL&#xD;&#xA;&#xD;&#xA;This register is not double buffered." lsb="28">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Active high strobe&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Active low strobe&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="STROBE_START" alias="STROBE START" description="This is the strobe start location. This location depends on the Strobe Mode used.&#xD;&#xA;&#xD;&#xA;In Strobe Mode='0', the start of the strobe is situated during the exposure time.&#xD;&#xA;In Strobe Mode='1', the start of the strobe is situated during the trigger delay.&#xD;&#xA;&#xD;&#xA;This register is double buffered" size="28">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Any 28 bits value&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="STROBE_CTRL2" offsetFromParent="50" useReservedSpaceBelow="true">
      <fields name="STROBE_MODE" alias="STROBE MODE" description="This register selects the location of the Strobe Start.&#xD;&#xA;&#xD;&#xA;When this register is set to 0, the  STROBE_START register is located during the exposure timer.&#xD;&#xA;&#xD;&#xA;When this register is set to 1, the  STROBE_START register is located during the trigger delay timer.&#xD;&#xA;&#xD;&#xA;In HW level mode the strobe mode must be set to STROBE MODE=0 since the trigger cannot be delayed.&#xD;&#xA;&#xD;&#xA;This register is double buffered&#xD;&#xA;" lsb="31">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Strobe start during exposure&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Strobe start during trigger delay&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="STROBE_B_EN" alias="STROBE phase B ENable" description="This field enables the generation of STROBE_B signal, for a NEXIS 3 system.&#xD;&#xA;&#xD;&#xA;This register is double buffered to support back2back mode in nexis systems." lsb="29">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Enable Strobe B&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Disable Strobe B&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="STROBE_A_EN" alias="STROBE phase A ENable" description="This field enables the generation of STROBE_A signal(Default strobe), for a NEXIS 3 system.&#xD;&#xA;&#xD;&#xA;This register is double buffered to support back2back mode in nexis systems." lsb="28" valueAtReset="1">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Enable Strobe A (default strobe)&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Disable Strobe A&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="STROBE_END" alias="STROBE END" description="This is the strobe end location. This location does not depend on the Strobe Mode used.&#xD;&#xA;&#xD;&#xA;This register is double buffered" size="28" valueAtReset="fffffff">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Any 28 bits value&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="ACQ_SER_CTRL" alias="Acquisition Serial Control" description="" offsetFromParent="58" useReservedSpaceBelow="true" address="190">
      <fields name="SER_RWn" alias="SERial Read/Writen" description="This register configures the type of the serial access to the CMOS sensor" lsb="16" valueAtReset="1">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Write access&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Read access&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="SER_CMD" alias="SERial CoMmand " description="This is the type of command sent to the serial fifo.&#xD;&#xA;&#xD;&#xA;To access the Sensor, write SER_WF_SS=1 with SER_CMD=0x0, with the parametters:  SER_WRn, SER_ADD(8:0) and SER_DAT(15:0).&#xD;&#xA;&#xD;&#xA;To insert a timer between fifo commands, write SER_WF_SS=1 with SER_CMD=0x1, with the parametter:  SER_DAT(15:0). The value of the timer inserted is calculated with the following formula: Timer= SER_DAT(15:0)*1024*SYS_PERIOD, SYS_PERIOD is 1/62.5mhz. The granularity of the timer is 16.384us&#xD;&#xA; &#xD;&#xA;To insert a Stop separator command, write SER_WF_SS=1 with SER_CMD=0x3. When the read logic encounter this command, it will stop read from the fifo until a new SER_RF_SS is received.&#xD;&#xA;" lsb="8" size="2">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>CMOS sensor access COMMAND&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Insert timer COMMAND&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=2&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>STOP separator COMMAND&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=3&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>RESERVED&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="SER_RF_SS" alias="SERial Read Fifo SnapShot" description="This is the read fifo snapshot. When the read fifo logic receives this snapshot, it will read all the fifo comands until a STOP separator command is read or Empty fifo is detected." lsb="4" readWrite="false" writeOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Idle&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Start Read FIFO&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="SER_WF_SS" alias="SERial Write Fifo SnapShot" description="When the system toggle this bit, the address, data and command are wrote to the command fifo. This fifo can contain the entire dcf, so the driver will not need to pool the status bit. This is a auto reset bit register, so after the driver write one, the bit will be auto reset to 0. To start the FIFO read logic write '1' to regsiter SER_RF_SS." readWrite="false" writeOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Idle&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Write a command to the FIFO&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="ACQ_SER_ADDATA" alias="Serial Interface Data" description="" offsetFromParent="60" useReservedSpaceBelow="true" address="1A0">
      <fields name="SER_DAT" alias="SERial interface DATa" description="This is the write data to be send to the CMOS sensor by the serial interface, or the  config data to a TIMER command or to a POWER sequence command. See register SER_CMD. " lsb="16" size="16">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Any 16 bits value&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="SER_ADD" alias="SERial interface ADDress" description="This is the read/write address of the register in the CMOS sensor.&#xD;&#xA;&#xD;&#xA;" size="15">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Any 9 bits value&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="ACQ_SER_STAT" alias="Serial Interface Data" description="" offsetFromParent="68" useReservedSpaceBelow="true" numberOfReservedSpacesBelow="9" address="1A0">
      <fields name="SER_FIFO_EMPTY" alias="SERial FIFO EMPTY" description="This is the EMPTY flag of the xilinx fifo, when '1' there are no pending operations in the fifo." lsb="24" readWrite="false" readOnly="true"/>
      <fields name="SER_BUSY" alias="SERial BUSY" description="This is the BUSY status of the FIFO read logic. The flag will be set to '1' when the SER_RF_SS is set to '1'. It will be reseted to '0' when the read logic will decode a STOP separator command or when the FIFO will be empty." lsb="16" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>FIFO read logic is idle&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>FIFO read logic is runnning&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="SER_DAT_R" alias="SERial interface DATa Read" description="This is the data read from CMOS sensor." size="16" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Any 16 bits value&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="SENSOR_CTRL" alias="SENSOR ConTRoL" offsetFromParent="90" useReservedSpaceBelow="true">
      <fields name="SENSOR_REFRESH_TEMP" alias="SENSOR REFRESH TEMPerature" description="This register starts a sensor temperature read on the serial interface of the Python sensor. The temperature value readed will be available on field SENSOR_TEMP when field SENSOR_TEMP_VALID is set to '1'.&#xD;&#xA;&#xD;&#xA;[Pas utilise pour le moment dans IRIS4]" lsb="24" readWrite="false" writeOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Idle&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Starts a Temperature read on Python SPI interface&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="SENSOR_POWERDOWN" description="After a PowerUp sequence(SESOR_POWERUP_DONE=1), successfull or not, this register can reset the clock oscillator and enable the reset to the sensor.&#xD;&#xA;&#xD;&#xA;This power down don't do power sequencing. " lsb="16" readWrite="false" writeOnly="true"/>
      <fields name="SENSOR_COLOR" alias="SENSOR COLOR" description="This register informs the datapath logic that a color sensor is used. This information is needed for the remapper logic." lsb="8">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Monochrone sensor&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Color sensor&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="SENSOR_REG_UPTATE" alias="SENSOR REGister UPDATE" description="By setting this bit to 1, the SENSOR CONTROLLER WILL UPDATE the programed CMOS sensor registers at the beginning of each grab." lsb="4" valueAtReset="1">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Do not update registers&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Update registers&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="SENSOR_RESETN" alias="SENSOR RESET Not" description="After a successfull PowerUP sequence, writing this field to '0' reset the Python CMOS sensor." lsb="1" valueAtReset="1">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Reset the sensor after a successfull  powerUP&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Nothing&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="SENSOR_POWERUP" description="This register Enables the clk oscillator and removes the reset from the sensor." readWrite="false" writeOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>idle&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Start the power sequence&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="SENSOR_STAT" alias="SENSOR control STATus" offsetFromParent="98">
      <fields name="SENSOR_TEMP" description="This register gives the Temperature of the Python sensor after a SENSOR_REFRESH_TEMP snapshot. The field SENSOR_TEMP_VALID indicates when the SENSOR_TEMP value is valid.&#xD;&#xA;&#xD;&#xA;[Pas utilise pour le moment dans IRIS4]" lsb="24" size="8" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="SENSOR_TEMP_VALID" alias="SENSOR TEMPerature VALID" description="This field indicates that the field SENSOR_TEMP have valid temperature after a SENSOR_REFRESH_TEMP snapshot. &#xD;&#xA;&#xD;&#xA;[Pas utilise pour le moment dans IRIS4]" lsb="23" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>SENSOR_TEMPERATURE register is not valid&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>SENSOR_TEMPERATURE register is valid&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="SENSOR_POWERDOWN" description="This field indicates that the sensor is in powerdown state." lsb="16" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Not in powerdown state&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Powerdown&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="SENSOR_RESETN" alias="SENSOR RESET N" description="This is the sensor RESETN status." lsb="13" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>In reset state&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Not in reset &lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="SENSOR_OSC_EN" alias="SENSOR OSCILLATOR ENable" description="This is the sensor oscillator enable status." lsb="12" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Disable&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Enable&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="SENSOR_VCC_PG" alias="SENSOR supply VCC  Power Good" description="This is the VCC  Power Good status (generated by external HW).&#xD;&#xA;&#xD;&#xA;[TO BE DELETED, waiting for ON SEMI INFORMATION]" lsb="8" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Disable&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Enable&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="SENSOR_POWERUP_STAT" description="When a powerup sequence is finish, this register indicates the result of the POWERUP sequence. " lsb="1" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>PowerUp sequence fail&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>PowerUp sequence success&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="SENSOR_POWERUP_DONE" description="This register indicates that the POWERUP sequence is finish. Read register SENSOR_POWERUP_STAT to see the result." readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>PowerUp sequence not started&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>PowerUp sequence finish&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="SENSOR_SUBSAMPLING" description="SENSOR ADDRESS " offsetFromParent="9C" useReservedSpaceBelow="true">
      <fields name="reserved1" description="&#xD;&#xA;" lsb="4" size="12" readWrite="false" staticVal="true"/>
      <fields name="ACTIVE_SUBSAMPLING_Y" description="Subsampling (Row) for ROI Configurations" lsb="3">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="reserved0" alias="" description="" lsb="2" readWrite="false" staticVal="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Idle&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Enable&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="M_SUBSAMPLING_Y" alias="" description="Subsampling (Row) for M Region" lsb="1">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="SUBSAMPLING_X" alias="" description="Readout in Column Subsampling Mode">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="SENSOR_GAIN_ANA" description="SENSOR ADDRESS 204 DEC" offsetFromParent="A4" numberOfReservedSpacesBelow="4">
      <fields name="reserved1" lsb="11" size="5" readWrite="false" staticVal="true"/>
      <fields name="ANALOG_GAIN" alias="" description="" lsb="8" size="3" valueAtReset="1">
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>1x&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=3&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>2x&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=7&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>4x&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="reserved0" size="8" readWrite="false" staticVal="true"/>
    </registers>
    <registers name="SENSOR_ROI_Y_START" description="SENSOR ADDRESS" offsetFromParent="A8">
      <fields name="reserved" lsb="10" size="6" readWrite="false" staticVal="true"/>
      <fields name="Y_START" alias="Y START" description="Y Start  in Kernel size (Kernel is 4 lines)" size="10"/>
    </registers>
    <registers name="SENSOR_ROI_Y_SIZE" description="SENSOR ADDRESS" offsetFromParent="AC">
      <fields name="reserved" lsb="10" size="6" readWrite="false" staticVal="true"/>
      <fields name="Y_SIZE" alias="Y SIZE" description="Y SIZE in Kernel size (Kernel is 4 lines)" size="10" valueAtReset="302"/>
    </registers>
    <registers name="SENSOR_ROI2_Y_START" description="SENSOR ADDRESS" offsetFromParent="B0">
      <fields name="reserved" lsb="10" size="6" readWrite="false" staticVal="true"/>
      <fields name="Y_START" alias="Y START" description="Y Start  in Kernel size (Kernel is 4 lines)" size="10"/>
    </registers>
    <registers name="SENSOR_ROI2_Y_SIZE" description="SENSOR ADDRESS " offsetFromParent="B4">
      <fields name="reserved" lsb="10" size="6" readWrite="false" staticVal="true"/>
      <fields name="Y_SIZE" alias="Y SIZE" description="Y SIZE in Kernel size (Kernel is 4 lines)" size="10" valueAtReset="302"/>
    </registers>
    <registers name="SENSOR_M_LINES" offsetFromParent="B8">
      <fields name="M_LINES_DISPLAY" description="When setting to 1, the Y_SIZE will have the Black lines included and the first_lines_mask_cnt will be set to 1, to remove only the embedded data" lsb="15"/>
      <fields name="M_SUPPRESSED" description="Suppress the Readout of Initial Lines in the M Region" lsb="10" size="5"/>
      <fields name="M_LINES_SENSOR" description="Number of Lines to Readout from M Region in Context 0 Unit is #lines&#xD;&#xA;&#xD;&#xA;Total number of Black lines = M_LINES&#xD;&#xA;Total number of Black lines transfered as valid Black lines= M_LINES-M_SUPRESSED" size="10" valueAtReset="8"/>
    </registers>
    <registers name="SENSOR_DP_GR" description="Sensor Analog data pedestal for Gr pixels (Black offset)" offsetFromParent="BC">
      <fields name="reserved" lsb="12" size="4" readWrite="false" staticVal="true"/>
      <fields name="DP_OFFSET_GR" description="Sensor Analog data pedestal for Gr pixels (Black offset)" size="12" valueAtReset="100"/>
    </registers>
    <registers name="SENSOR_DP_GB" description="Sensor Analog data pedestal for Gb pixels (Black offset)" offsetFromParent="C0">
      <fields name="reserved" lsb="12" size="4" readWrite="false" staticVal="true"/>
      <fields name="DP_OFFSET_GB" description="Sensor Analog data pedestal for Gb pixels (Black offset)" size="12" valueAtReset="100"/>
    </registers>
    <registers name="SENSOR_DP_R" description="Sensor Analog data pedestal for R pixels (Black offset)" offsetFromParent="C4">
      <fields name="reserved" lsb="12" size="4" readWrite="false" staticVal="true"/>
      <fields name="DP_OFFSET_R" description="Sensor Analog data pedestal for R pixels (Black offset)" size="12" valueAtReset="100"/>
    </registers>
    <registers name="SENSOR_DP_B" description="Sensor Analog data pedestal for B pixels (Black offset)" offsetFromParent="C8" useReservedSpaceBelow="true" numberOfReservedSpacesBelow="5">
      <fields name="reserved" lsb="12" size="4" readWrite="false" staticVal="true"/>
      <fields name="DP_OFFSET_B" description="Sensor Analog data pedestal for B pixels (Black offset)" size="12" valueAtReset="100"/>
    </registers>
    <registers name="DEBUG_PINS" offsetFromParent="E0" useReservedSpaceBelow="true">
      <fields name="Debug3_sel" description="  debug_vector(0x0)  &lt;=  python_monitor0;&#xD;&#xA;  debug_vector(0x1)  &lt;=  python_monitor1;&#xD;&#xA;  debug_vector(0x2)  &lt;=  grab_mngr_trig_rdy;&#xD;&#xA;  debug_vector(0x3)  &lt;=  curr_trig0;&#xD;&#xA;  debug_vector(0x4)  &lt;=  strobe;&#xD;&#xA;  debug_vector(0x5)  &lt;=  python_exposure;&#xD;&#xA;  debug_vector(0x6)  &lt;=  FOT;&#xD;&#xA;  debug_vector(0x7)  &lt;=  readout;&#xD;&#xA;  debug_vector(0x8)  &lt;=  readout_stateD;&#xD;&#xA;  debug_vector(0x9)  &lt;=  ext_trig;&#xD;&#xA;  debug_vector(0xa) &lt;=  REGFILE.ACQ.GRAB_CTRL.GRAB_CMD;&#xD;&#xA;  debug_vector(0xb) &lt;=  REGFILE.ACQ.GRAB_CTRL.GRAB_SS;&#xD;&#xA;  debug_vector(0xc)&lt;=  grab_mngr_trig;&#xD;&#xA;  debug_vector(0xd) &lt;=  grab_mngr_trig_rdy;&#xD;&#xA;  debug_vector(0xe) &lt;=  grab_pending;&#xD;&#xA;  debug_vector(0xf) &lt;=  grab_active;&#xD;&#xA;  debug_vector(0x10) &lt;=  DEC_DATA_EN;&#xD;&#xA;  debug_vector(0x11) &lt;=  DEC_SOL;&#xD;&#xA;  debug_vector(0x12)  &lt;=  DEC_SOF;&#xD;&#xA;  debug_vector(0x13)  &lt;=  DEC_EOL;&#xD;&#xA;  debug_vector(0x14)  &lt;=  DEC_EOF;&#xD;&#xA;  debug_vector(0x15)  &lt;=  DEC_CRC;&#xD;&#xA;  debug_vector(0x16)  &lt;=  DEC_TRAIN;&#xD;&#xA;  debug_vector(0x17)  &lt;=  fpnprnu_corr_sof;&#xD;&#xA;  debug_vector(0x18)  &lt;=  fpnprnu_corr_sol;&#xD;&#xA;  debug_vector(0x19)  &lt;=  fpnprnu_corr_data_val;&#xD;&#xA;  debug_vector(0x1a) &lt;=  fpnprnu_corr_eol;&#xD;&#xA;  debug_vector(0x1b) &lt;=  fpnprnu_corr_eof;&#xD;&#xA;  debug_vector(0x1c) &lt;=  python_ssn_int;&#xD;&#xA;  debug_vector(0x1d) &lt;=  debug_lvds(0);&#xD;&#xA;  debug_vector(0x1e) &lt;=  debug_lvds(1);&#xD;&#xA;  debug_vector(0x1f) &lt;=  'Z'; " lsb="24" size="5" valueAtReset="1f"/>
      <fields name="Debug2_sel" description=" debug_vector(0x0)  &lt;=  python_monitor0;&#xD;&#xA;  debug_vector(0x1)  &lt;=  python_monitor1;&#xD;&#xA;  debug_vector(0x2)  &lt;=  grab_mngr_trig_rdy;&#xD;&#xA;  debug_vector(0x3)  &lt;=  curr_trig0;&#xD;&#xA;  debug_vector(0x4)  &lt;=  strobe;&#xD;&#xA;  debug_vector(0x5)  &lt;=  python_exposure;&#xD;&#xA;  debug_vector(0x6)  &lt;=  FOT;&#xD;&#xA;  debug_vector(0x7)  &lt;=  readout;&#xD;&#xA;  debug_vector(0x8)  &lt;=  readout_stateD;&#xD;&#xA;  debug_vector(0x9)  &lt;=  ext_trig;&#xD;&#xA;  debug_vector(0xa) &lt;=  REGFILE.ACQ.GRAB_CTRL.GRAB_CMD;&#xD;&#xA;  debug_vector(0xb) &lt;=  REGFILE.ACQ.GRAB_CTRL.GRAB_SS;&#xD;&#xA;  debug_vector(0xc)&lt;=  grab_mngr_trig;&#xD;&#xA;  debug_vector(0xd) &lt;=  grab_mngr_trig_rdy;&#xD;&#xA;  debug_vector(0xe) &lt;=  grab_pending;&#xD;&#xA;  debug_vector(0xf) &lt;=  grab_active;&#xD;&#xA;  debug_vector(0x10) &lt;=  DEC_DATA_EN;&#xD;&#xA;  debug_vector(0x11) &lt;=  DEC_SOL;&#xD;&#xA;  debug_vector(0x12)  &lt;=  DEC_SOF;&#xD;&#xA;  debug_vector(0x13)  &lt;=  DEC_EOL;&#xD;&#xA;  debug_vector(0x14)  &lt;=  DEC_EOF;&#xD;&#xA;  debug_vector(0x15)  &lt;=  DEC_CRC;&#xD;&#xA;  debug_vector(0x16)  &lt;=  DEC_TRAIN;&#xD;&#xA;  debug_vector(0x17)  &lt;=  fpnprnu_corr_sof;&#xD;&#xA;  debug_vector(0x18)  &lt;=  fpnprnu_corr_sol;&#xD;&#xA;  debug_vector(0x19)  &lt;=  fpnprnu_corr_data_val;&#xD;&#xA;  debug_vector(0x1a) &lt;=  fpnprnu_corr_eol;&#xD;&#xA;  debug_vector(0x1b) &lt;=  fpnprnu_corr_eof;&#xD;&#xA;  debug_vector(0x1c) &lt;=  python_ssn_int;&#xD;&#xA;  debug_vector(0x1d) &lt;=  debug_lvds(0);&#xD;&#xA;  debug_vector(0x1e) &lt;=  debug_lvds(1);&#xD;&#xA;  debug_vector(0x1f) &lt;=  'Z'; " lsb="16" size="5" valueAtReset="1f"/>
      <fields name="Debug1_sel" description="  debug_vector(0x0)  &lt;=  python_monitor0;&#xD;&#xA;  debug_vector(0x1)  &lt;=  python_monitor1;&#xD;&#xA;  debug_vector(0x2)  &lt;=  grab_mngr_trig_rdy;&#xD;&#xA;  debug_vector(0x3)  &lt;=  curr_trig0;&#xD;&#xA;  debug_vector(0x4)  &lt;=  strobe;&#xD;&#xA;  debug_vector(0x5)  &lt;=  python_exposure;&#xD;&#xA;  debug_vector(0x6)  &lt;=  FOT;&#xD;&#xA;  debug_vector(0x7)  &lt;=  readout;&#xD;&#xA;  debug_vector(0x8)  &lt;=  readout_stateD;&#xD;&#xA;  debug_vector(0x9)  &lt;=  ext_trig;&#xD;&#xA;  debug_vector(0xa) &lt;=  REGFILE.ACQ.GRAB_CTRL.GRAB_CMD;&#xD;&#xA;  debug_vector(0xb) &lt;=  REGFILE.ACQ.GRAB_CTRL.GRAB_SS;&#xD;&#xA;  debug_vector(0xc)&lt;=  grab_mngr_trig;&#xD;&#xA;  debug_vector(0xd) &lt;=  grab_mngr_trig_rdy;&#xD;&#xA;  debug_vector(0xe) &lt;=  grab_pending;&#xD;&#xA;  debug_vector(0xf) &lt;=  grab_active;&#xD;&#xA;  debug_vector(0x10) &lt;=  DEC_DATA_EN;&#xD;&#xA;  debug_vector(0x11) &lt;=  DEC_SOL;&#xD;&#xA;  debug_vector(0x12)  &lt;=  DEC_SOF;&#xD;&#xA;  debug_vector(0x13)  &lt;=  DEC_EOL;&#xD;&#xA;  debug_vector(0x14)  &lt;=  DEC_EOF;&#xD;&#xA;  debug_vector(0x15)  &lt;=  DEC_CRC;&#xD;&#xA;  debug_vector(0x16)  &lt;=  DEC_TRAIN;&#xD;&#xA;  debug_vector(0x17)  &lt;=  fpnprnu_corr_sof;&#xD;&#xA;  debug_vector(0x18)  &lt;=  fpnprnu_corr_sol;&#xD;&#xA;  debug_vector(0x19)  &lt;=  fpnprnu_corr_data_val;&#xD;&#xA;  debug_vector(0x1a) &lt;=  fpnprnu_corr_eol;&#xD;&#xA;  debug_vector(0x1b) &lt;=  fpnprnu_corr_eof;&#xD;&#xA;  debug_vector(0x1c) &lt;=  python_ssn_int;&#xD;&#xA;  debug_vector(0x1d) &lt;=  debug_lvds(0);&#xD;&#xA;  debug_vector(0x1e) &lt;=  debug_lvds(1);&#xD;&#xA;  debug_vector(0x1f) &lt;=  'Z'; " lsb="8" size="5" valueAtReset="1f"/>
      <fields name="Debug0_sel" description=" debug_vector(0x0)  &lt;=  python_monitor0;&#xD;&#xA;  debug_vector(0x1)  &lt;=  python_monitor1;&#xD;&#xA;  debug_vector(0x2)  &lt;=  grab_mngr_trig_rdy;&#xD;&#xA;  debug_vector(0x3)  &lt;=  curr_trig0;&#xD;&#xA;  debug_vector(0x4)  &lt;=  strobe;&#xD;&#xA;  debug_vector(0x5)  &lt;=  python_exposure;&#xD;&#xA;  debug_vector(0x6)  &lt;=  FOT;&#xD;&#xA;  debug_vector(0x7)  &lt;=  readout;&#xD;&#xA;  debug_vector(0x8)  &lt;=  readout_stateD;&#xD;&#xA;  debug_vector(0x9)  &lt;=  ext_trig;&#xD;&#xA;  debug_vector(0xa) &lt;=  REGFILE.ACQ.GRAB_CTRL.GRAB_CMD;&#xD;&#xA;  debug_vector(0xb) &lt;=  REGFILE.ACQ.GRAB_CTRL.GRAB_SS;&#xD;&#xA;  debug_vector(0xc)&lt;=  grab_mngr_trig;&#xD;&#xA;  debug_vector(0xd) &lt;=  grab_mngr_trig_rdy;&#xD;&#xA;  debug_vector(0xe) &lt;=  grab_pending;&#xD;&#xA;  debug_vector(0xf) &lt;=  grab_active;&#xD;&#xA;  debug_vector(0x10) &lt;=  DEC_DATA_EN;&#xD;&#xA;  debug_vector(0x11) &lt;=  DEC_SOL;&#xD;&#xA;  debug_vector(0x12)  &lt;=  DEC_SOF;&#xD;&#xA;  debug_vector(0x13)  &lt;=  DEC_EOL;&#xD;&#xA;  debug_vector(0x14)  &lt;=  DEC_EOF;&#xD;&#xA;  debug_vector(0x15)  &lt;=  DEC_CRC;&#xD;&#xA;  debug_vector(0x16)  &lt;=  DEC_TRAIN;&#xD;&#xA;  debug_vector(0x17)  &lt;=  fpnprnu_corr_sof;&#xD;&#xA;  debug_vector(0x18)  &lt;=  fpnprnu_corr_sol;&#xD;&#xA;  debug_vector(0x19)  &lt;=  fpnprnu_corr_data_val;&#xD;&#xA;  debug_vector(0x1a) &lt;=  fpnprnu_corr_eol;&#xD;&#xA;  debug_vector(0x1b) &lt;=  fpnprnu_corr_eof;&#xD;&#xA;  debug_vector(0x1c) &lt;=  python_ssn_int;&#xD;&#xA;  debug_vector(0x1d) &lt;=  debug_lvds(0);&#xD;&#xA;  debug_vector(0x1e) &lt;=  debug_lvds(1);&#xD;&#xA;  debug_vector(0x1f) &lt;=  'Z'; " size="5" valueAtReset="1f"/>
    </registers>
    <registers name="TRIGGER_MISSED" offsetFromParent="E8" useReservedSpaceBelow="true">
      <fields name="TRIGGER_MISSED_RST" alias="TRIGGER MISSED ReSeT" description="This is the trigger missed reset." lsb="28" readWrite="false" writeOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Reset the Trigger counter reset&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="TRIGGER_MISSED_CNTR" alias="TRIGGER MISSED CouNTeR" description="This is the number of trigger missed detected." size="16" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="SENSOR_FPS" description="" offsetFromParent="F0" numberOfReservedSpacesBelow="43">
      <fields name="SENSOR_FPS" alias="SENSOR Frame Per Second" description="This is the number of frames received in 1 second interval. This register can count up to 64k frame/s. This counter counts on SO_FOT event." size="16" readWrite="false" readOnly="true"/>
    </registers>
    <registers name="SENSOR_FPS2" description="" offsetFromParent="F4" useReservedSpaceBelow="true" numberOfReservedSpacesBelow="42">
      <fields name="SENSOR_FPS" alias="SENSOR Frame Per Second" description="This is the number of frames received in 10 second interval. This register can count up to 1.049 million frames. This counter counts on SO_FOT event." size="20" readWrite="false" readOnly="true"/>
    </registers>
    <registers name="DEBUG" offsetFromParent="1A0" useReservedSpaceBelow="true">
      <fields name="DEBUG_RST_CNTR" description="This register clears the debug cntrs" lsb="28" valueAtReset="1">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Reset counters&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="LED_TEST_COLOR" lsb="1" size="2">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>The LED is OFF&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>The LED is GREEN&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=2&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>The LED is RED&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=3&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>The LED is ORANGE&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="LED_TEST" description="This register will put the LED status in test mode. The test mode is controlled by LED_TEST_COLOR">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>The LED is in user mode.&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>The LED is in test mode.&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="DEBUG_CNTR1" offsetFromParent="1A8" useReservedSpaceBelow="true" numberOfReservedSpacesBelow="3">
      <fields name="SENSOR_FRAME_DURATION" alias="" description="This is the time between the last 2 EOF received(in sys clock domain). This register can count up to 4.29 seconds. It can be used to predict sensor framerate or to verify sync between 3D profiler heads.&#xD;&#xA;This feature is enabled by setting register regfile.ACQ.DEBUG.DEBUG_RST_CNTR to 0." size="28" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Any 28 bits value&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="EXP_FOT" offsetFromParent="1B8" useReservedSpaceBelow="true">
      <fields name="EXP_FOT" alias="EXPosure during FOT" description="When set to '1' this register, the output exposure and strobe signals will take into account the exposure in the FOT of the frame. This timing must be programmed in register EXP_FOT_TIME.&#xD;&#xA;This timing must be calculated from the OnSemi setting files ." lsb="16" valueAtReset="1">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Disable exposure during FOT in output exposure signal and Strobe&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Enable exposure during FOT in output exposure signal and Strobe&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="EXP_FOT_TIME" alias="EXPosure during FOT TIME" description="This is the time of the exposure during the FOT.&#xD;&#xA;This timing must be calculated from the OnSemi setting files .&#xD;&#xA;&#xD;&#xA;From DCF v1.2, for all LVDS modes : &#xD;&#xA;&#xD;&#xA;P5000 &amp; P2000&#xD;&#xA;EXP_FOT=40.666us, program value  0x9ee&#xD;&#xA;&#xD;&#xA;P1300 &amp; P500 &amp; P300&#xD;&#xA;EXP_FOT=27.333us, program value  0x6ac" size="12" valueAtReset="9ee">
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="ACQ_SFNC" offsetFromParent="1C0" useReservedSpaceBelow="true" numberOfReservedSpacesBelow="3">
      <fields name="RELOAD_GRAB_PARAMS" alias="" description="This register is not used for the moment. It may be used in the future to reload the exposure time " valueAtReset="1">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="TIMER_CTRL" offsetFromParent="1D0">
      <fields name="ADAPTATIVE" description="When this field is set to 1, the timer will adapt the trigger to the trigger_rdy of the controller to not generate trigger missed. When the timer is programmed too fast and the ADAPTATIVE field is set to 0, trigger missed will be generated." lsb="8" valueAtReset="1">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Non adaptative&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Adaptative to trigger_rdy&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="TIMERSTOP" description="This field stops the internal programmable Timer Trigger" lsb="4" readWrite="false" writeOnly="true"/>
      <fields name="TIMERSTART" description="This field starts the internal programmable Timer Trigger." readWrite="false" writeOnly="true"/>
    </registers>
    <registers name="TIMER_DELAY" offsetFromParent="1D4">
      <fields name="VALUE" description="This register sets the delay for the first trigger generated when the timer is used. &#xD;&#xA;&#xD;&#xA;This register is double buffered with TimerStart register." size="32"/>
    </registers>
    <registers name="TIMER_DURATION" offsetFromParent="1D8">
      <fields name="VALUE" description="This register sets the timer duration. When the counter reaches the value programmed in this register the counter will be reseted to 0. The trigger will be generated when the counter reaches value 0x1. &#xD;&#xA;&#xD;&#xA;This register is double buffered with TIMERSTART register." size="32"/>
    </registers>
  </registerFileAbstractNodes>
  <registerFileAbstractNodes xsi:type="com.matrox.fdk.editor.registerfile:Section" name="HISPI" alias="XGS HiSPi interface configuration" baseAddress="400" endAddress="460">
    <registers name="CTRL">
      <fields name="SW_CLR_IDELAYCTRL" alias="Reset the Xilinx macro IDELAYCTRL" lsb="4">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>No effect&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Reset IDELAYCTRL&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="SW_CLR_HISPI" lsb="3"/>
      <fields name="SW_CALIB_SERDES" alias="Initiate the SERDES TAP calibrartion " lsb="2" readWrite="false" writeOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>No effect&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Initiate the calibration&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="ENABLE_DATA_PATH" lsb="1"/>
      <fields name="ENABLE_HISPI"/>
    </registers>
    <registers name="STATUS" alias="Global status register" offsetFromParent="4">
      <fields name="FSM" alias="HISPI  finite state machine status" lsb="28" size="4" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>S_DISABLED&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>S_IDLE&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=2&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>S_RESET_PHY&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=3&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>S_INIT&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=4&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>S_START_CALIBRATION&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=5&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>S_CALIBRATE&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=6&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>S_PACK&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=7&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>S_FLUSH_PACKER&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=8&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>S_SOF&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=9&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>S_EOF&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=10&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>S_SOL&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=11&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>S_EOL&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=12&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Reserved&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=13&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Reserved&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=14&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>FSM error (Unknown state)&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=15&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>S_DONE&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="CRC_ERROR" alias="Lane CRC error" lsb="4" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>No lane CRC error occured&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Lane CRC error occured&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="PHY_BIT_LOCKED_ERROR" lsb="3" readWrite="false" readOnly="true"/>
      <fields name="FIFO_ERROR" alias="Calibration active " lsb="2" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>No FiFo error occured&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>FiFo error occured&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="CALIBRATION_ERROR" alias="Calibration error" lsb="1" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>No calibration error&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>A calibration error occured&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="CALIBRATION_DONE" alias="Calibration sequence completed" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Calibration sequence not completed&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Last calibration sequence completed successfully&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="IDELAYCTRL_STATUS" offsetFromParent="8">
      <fields name="PLL_LOCKED" alias="IDELAYCTRL PLL locked" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>IDELAYCTRL PLL unlocked&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>IDELAYCTRL PLL locked&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="IDLE_CHARACTER" offsetFromParent="C">
      <fields name="VALUE" size="12" valueAtReset="3A6">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="PHY" offsetFromParent="10">
      <fields name="PIXEL_PER_LANE" alias="Number of pixels per lanes" description="" lsb="16" size="10" valueAtReset="AE">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="MUX_RATIO" description="This is the configuration MUX ratio of the  XGS sensor used. For GTX camera the mux ratio is fixed and set to 4." lsb="8" size="3" valueAtReset="4" readWrite="false" staticVal="true"/>
      <fields name="NB_LANES" description="This is the configuration number of HiSPI lanes of the  XGS sensor used. &#xD;&#xA;For GTX camera it must be set to 4 in XGS5000, XGS3000,XGS2000 and XGS1300.&#xD;&#xA;For GTX camera it must be set to 6 in XGS16M, XGS12M, XGS9.4M and XGS8M XGS1300.&#xD;&#xA;" size="3" valueAtReset="6">
        <possibleValues>&lt;matrox_column_delimiter>value=4&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>4 lanes enabled&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=6&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>6 lanes enabled&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>other_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Reserved (All lanes are disabled)&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="FRAME_CFG" offsetFromParent="14">
      <fields name="LINES_PER_FRAME" description="This is the total number of lines in a frame including dummy, BL, Interpolation and valid pixels. Reset value is 3102 (XGS12M). The value may change depending on the Black Lines(BL) programmed in the M-LINES section of the frame.&#xD;&#xA;Reset value is 3102 (0xc1e, XGS12M)&#xD;&#xA;" lsb="16" size="12" valueAtReset="c1e"/>
      <fields name="PIXELS_PER_LINE" description="This is the total number of pixel in a line, including dummy, BL, Interpolation and valid pixels. Reset value is 4176 (0x1050, XGS12M)" size="13" valueAtReset="1050"/>
    </registers>
    <registers name="FRAME_CFG_X_VALID" offsetFromParent="18" useReservedSpaceBelow="true" numberOfReservedSpacesBelow="2">
      <fields name="X_END" description="This register defines the position of the last horizontal valid pixel (including initials dummy pixels, black reference pixels and interpolation pixels). The location of the last X valid pixel differs between XGS family members and configurations. The dcf will load the location of  the X end. It is defined as 1-based number&#xD;&#xA;&#xD;&#xA;For XGS12000, in a monochrome sensor the x end is 4132 (0x1024).&#xD;&#xA;For XGS12000, in a color sensor the x end is 4136 (0x1028). (For BAYER correction) " lsb="16" size="13" valueAtReset="1023">
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="X_START" description="This register defines the position of the first horizontal valid pixel (including dummy pixels, black reference pixels and interpolation pixels). The location of the first X valid pixel differs between XGS family members and configurations. The dcf will load the location of  the X start. It is defined as 1-based number&#xD;&#xA;&#xD;&#xA;For XGS12000, in a monochrome sensor the x start is 36 (0x24).&#xD;&#xA;For XGS12000, in a color sensor the x start is 32 (0x22). (For BAYER correction) " size="13" valueAtReset="24">
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="LANE_DECODER_STATUS" offsetFromParent="24" useMultiples="true" numberOfMultiples="6">
      <fields name="CRC_ERROR" alias="CRC Error" lsb="15" readWrite="false" readWriteToClear="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>CRC no error occured&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>CRC error occured&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="PHY_SYNC_ERROR" lsb="14" readWrite="false" readWriteToClear="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Pixel bit boundaries unlocked&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Pixel bit boundaries locked&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="PHY_BIT_LOCKED_ERROR" lsb="13" readWrite="false" readWriteToClear="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Pixel bit boundaries unlocked&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Pixel bit boundaries locked&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="PHY_BIT_LOCKED" lsb="12" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Pixel bit boundaries unlocked&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Pixel bit boundaries locked&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="CALIBRATION_TAP_VALUE" lsb="4" size="5" readWrite="false" readOnly="true"/>
      <fields name="CALIBRATION_ERROR" lsb="3" readWrite="false" readWriteToClear="true"/>
      <fields name="CALIBRATION_DONE" lsb="2" readWrite="false" readOnly="true"/>
      <fields name="FIFO_UNDERRUN" lsb="1" readWrite="false" readWriteToClear="true"/>
      <fields name="FIFO_OVERRUN" readWrite="false" readWriteToClear="true"/>
    </registers>
    <registers name="TAP_HISTOGRAM" offsetFromParent="3C" useMultiples="true" numberOfMultiples="6">
      <fields name="VALUE" size="32" readWrite="false" readOnly="true"/>
    </registers>
    <registers name="LANE_PACKER_STATUS" offsetFromParent="54" useMultiples="true" numberOfMultiples="3">
      <fields name="FIFO_UNDERRUN" lsb="1" readWrite="false" readWriteToClear="true"/>
      <fields name="FIFO_OVERRUN" readWrite="false" readWriteToClear="true"/>
    </registers>
    <registers name="DEBUG" offsetFromParent="60">
      <fields name="MANUAL_CALIB_EN" lsb="31"/>
      <fields name="LOAD_TAPS" lsb="30" readWrite="false" writeOnly="true"/>
      <fields name="TAP_LANE_5" lsb="25" size="5"/>
      <fields name="TAP_LANE_4" lsb="20" size="5"/>
      <fields name="TAP_LANE_3" lsb="15" size="5"/>
      <fields name="TAP_LANE_2" lsb="10" size="5"/>
      <fields name="TAP_LANE_1" lsb="5" size="5"/>
      <fields name="TAP_LANE_0" size="5"/>
    </registers>
  </registerFileAbstractNodes>
  <registerFileAbstractNodes xsi:type="com.matrox.fdk.editor.registerfile:Section" name="DPC" baseAddress="480" endAddress="498">
    <registers name="DPC_CAPABILITIES">
      <fields name="DPC_LIST_LENGTH" description="This register defines the maximum number of pixels that can be corrected by the DPC module. (ONE-based).&#xD;&#xA;This register is calculated with formula : (2^DPC_CORR_PIXELS_DEPTH)-1 , where DPC_CORR_PIXELS_DEPTH is a generic to the DPC module.&#xD;&#xA;&#xD;&#xA;" lsb="16" size="12" readWrite="false" readOnly="true"/>
      <fields name="DPC_VER" description="Implemented version of the DPC module" size="4" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Initial monochrone correction only, 2 lines buffered.&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="DPC_LIST_CTRL" offsetFromParent="4">
      <fields name="dpc_fifo_reset" description="Write '1' then '0' to field dpcL_FIFO_RST to reset overrun/underrun flags of the line buffers and reset the Fifo logic.&#xD;&#xA;&#xD;&#xA;The DPC dual port ram  is not SW reset .&#xD;&#xA;&#xD;&#xA;The fifo in each  processing DPC unit is HW reset at each SOF. " lsb="29">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Fifo in normal operation&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Fifo in reset State&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="dpc_firstlast_line_rem" description="When this register is set to 1, the DPC macro will remove the first and last line of the image corrected.&#xD;&#xA;This can be usefull if we want to correct the 4 pixels in the corners of the image. The SW can program two more lines in the frame so the DPC macro can have enough pixels to correct the 4 pixel coners." lsb="28">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Do not remove any lines of the image received&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Remove first and last line of the image received&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="dpc_list_count" description="This is the number of entries in the DPC list. The driver need to set the dcp_list_count in order to correct the image. The value 0 is allowed and when set to 0 no pixel will be corrected.  Up to (2^DPC_CORR_PIXELS_DEPTH)-1 pixels can be corrected. &#xD;&#xA;If generic DPC_CORR_PIXELS_DEPTH in XGS_Athena module is set to 9, up to 511 pixels may be corrected." lsb="16" size="12">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>0 to 2^DPC_CORR_PIXELS_DEPTH&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="dpc_pattern0_cfg" description="This field configures the behabieur of the correction pattern 0x0. If this field is set to 0x0 then the current pixel will not be corrected. If this field is set to 0x1 then the current pixel will be replaced by the value 0x3ff (white pixel)" lsb="15">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Do not correct current pixel&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Replace current pixel by a white pixel (0x3ff)&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="dpc_enable" description="Dead Pixel Correction core Enable, when this field is set to 1, the DPC logic will correct all the dead pixels that are listed in the DPC list.&#xD;&#xA;&#xD;&#xA;The grab must be idle when changing this register." lsb="14">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>DPC logic is bypassed&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>DPC logic is enabled&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="dpc_list_WRn" description="This is the Write/ReadN flag. To write to the DPC list set this bit to 1 and start the transaction with the dpc_list_ss field. To read from the DPC list set this bit to 0 and start the transaction with the dpc_list_ss field. " lsb="13">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Read list operation&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Write list operation&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="dpc_list_ss" description="This is the DPC snapshot. In order to start a write or read transaction the snapsot needs to be writen to '1'. This bit is a auto clear regsiter. " lsb="12" readWrite="false" writeOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Do nothing&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Start the READ/WRITE transaction&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="dpc_list_add" description="This is the address of the DPC list to be access by the read/write operation. Pixel 0 to correct is located at address b000000. Since the dpc_list_count field is also 6 bit wide, address 0 to 62 of the list can be used.&#xD;&#xA;&#xD;&#xA;Adress 0x3f cannot be used. This DPC location will not be corrected." size="12">
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Valid DPC adress&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="DPC_LIST_STAT" offsetFromParent="8">
      <fields name="dpc_fifo_underrun" description="This is the fifo underrun status of the 2 linebuffers in the dpc macro. Write '1' then '0' to field dpc_FIFO_RST to reset this flag and reset the Fifo logic. " lsb="31" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Underrun not detected&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Underrun detected&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="dpc_fifo_overrun" description="This is the fifo overrun status of the 2 linebuffers in the dpc macro.&#xD;&#xA;Write '1' then '0' to field dpc_FIFO_RST to reset this flag and reset the Fifo logic. " lsb="30" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Overrun not detected&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Overrun detected&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="DPC_LIST_DATA1" offsetFromParent="C">
      <fields name="dpc_list_corr_y" description="This is Y location of the pixel to be corrected when executing a write to the DPC list." lsb="16" size="12"/>
      <fields name="dpc_list_corr_x" description="This is X location of the pixel to be corrected when executing a write to the DPC list." size="13"/>
    </registers>
    <registers name="DPC_LIST_DATA2" alias="" description="" offsetFromParent="10">
      <fields name="dpc_list_corr_pattern" description="This is pattern of the pixel to be corrected when executing a write to the DPC list.&#xD;&#xA;&#xD;&#xA;2 bit correction : 34, 17, 136, 68&#xD;&#xA;4 bit correction : 170, 153, 51, 204, 85, 102&#xD;&#xA;6 bit correcttion: 187,238 (mapped to 170), 119,221 (mapped to 85)&#xD;&#xA;8 bit correction : 255&#xD;&#xA;Set pixel to 255 (white), debug  : 0" size="8"/>
    </registers>
    <registers name="DPC_LIST_DATA1_RD" offsetFromParent="14">
      <fields name="dpc_list_corr_y" description="This is Y location of the pixel to be corrected when executing a write to the DPC list." lsb="16" size="12" readWrite="false" readOnly="true"/>
      <fields name="dpc_list_corr_x" description="This is X location of the pixel to be corrected when executing a write to the DPC list." size="13" readWrite="false" readOnly="true"/>
    </registers>
    <registers name="DPC_LIST_DATA2_RD" alias="" description="" offsetFromParent="18">
      <fields name="dpc_list_corr_pattern" description="This is pattern of the pixel to be corrected when executing a write to the DPC list.&#xD;&#xA;&#xD;&#xA;2 bit correction : 34, 17, 136, 68&#xD;&#xA;4 bit correction : 170, 153, 51, 204, 85, 102&#xD;&#xA;6 bit correcttion: 187,238 (mapped to 170), 119,221 (mapped to 85)&#xD;&#xA;8 bit correction : 255&#xD;&#xA;Set pixel to 255 (white), debug  : 0" size="8" readWrite="false" readOnly="true"/>
    </registers>
  </registerFileAbstractNodes>
  <registerFileAbstractNodes xsi:type="com.matrox.fdk.editor.registerfile:Section" name="LUT" baseAddress="4B0" endAddress="4B8">
    <registers name="LUT_CAPABILITIES">
      <fields name="LUT_SIZE_CONFIG" description="" lsb="16" size="12" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Reserved&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>10 to 8 bits LUT&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="LUT_VER" description="Implemented version of the LUT module" size="4" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Initial monochrone LUT&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="LUT_CTRL" offsetFromParent="4">
      <fields name="LUT_BYPASS" alias="LUT BYPASS" description="When set this register to '1', the LUT logic will not be used, and the 8MSB bits of the input data will send to the DMA. Bypassing the LUT, decrease power comsunption of the fpga." lsb="28"/>
      <fields name="LUT_DATA_W" alias="LUT DATA to Write" description="Data to write in the LUT." lsb="16" size="8"/>
      <fields name="LUT_SEL" alias="LUT SELection" description="LUT programmation selector. &#xD;&#xA;&#xD;&#xA;The Color and Mono shares the same 8 physical LUT. &#xD;&#xA;&#xD;&#xA;In mono mode set LUT_SEL to 8 to write to all RAMs simultaneous." lsb="12" size="4"/>
      <fields name="LUT_WRN" alias="LUT Write ReadNot" description="LUT Write mode" lsb="11">
        <possibleValues>&lt;matrox_column_delimiter>value=0&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Read operation&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>value=1&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>Write operation&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
      <fields name="LUT_SS" alias="LUT SnapShot" description="Start the LUT READ or WRITE OPERATION " lsb="10" readWrite="false" writeOnly="true"/>
      <fields name="LUT_ADD" size="10"/>
    </registers>
    <registers name="LUT_RB" offsetFromParent="8">
      <fields name="LUT_RB" description="Not Implemented to save FPGA ressources" size="8" readWrite="false" staticVal="true"/>
    </registers>
  </registerFileAbstractNodes>
  <registerFileAbstractNodes xsi:type="com.matrox.fdk.editor.registerfile:External" name="SYSMONXIL" alias="SYSMONXIL" description="Access Xilinx embedded system monitoring module.&#xD;&#xA;See Xilinx UG480" baseAddress="700" endAddress="7FC" totalSize="64" useTotalSize="true">
    <registers name="TEMP">
      <fields name="SMTEMP" alias="System Monitor TEMPerature" description="This field reports the temperature of the die. Maximum-measurement error is ±4 degC. The temperature in Celcius = (SMTEMP*503.975/4096) – 273.15." lsb="4" size="12" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="VCCINT" alias="system monitor VCCINT" offsetFromParent="4">
      <fields name="SMVINT" alias="System Monitor VCCINT" description="This field reports voltage for VCCINT supply: VCCINT = (SMVINT/4096)x3V. VCCINT is the core voltage nominally set to 1.0V" lsb="4" size="12" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="VCCAUX" alias="system monitor VCCAUX" offsetFromParent="8" useReservedSpaceBelow="true" numberOfReservedSpacesBelow="3">
      <fields name="SMVAUX" alias="System Monitor VCCAUX" description="This field reports voltage for VCCAUX supply: VCCAUX = (SMVAUX/4096)x3V. VCCAUX is the auxiliary voltage nominally set to 1.8V." lsb="4" size="12" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="VCCBRAM" alias="system monitor VCCBRAM" offsetFromParent="18" useReservedSpaceBelow="true" numberOfReservedSpacesBelow="25">
      <fields name="SMVBRAM" alias="System Monitor VCCBRAM" description="This field reports voltage for VCCBRAM supply: VCCBRAM = (SMVBRAM/4096)x3V. VCCBRAM is the block RAM supply nominally set to 1.0V." lsb="4" size="12" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="TEMP_MAX" alias="system monitor Temperature MAXimum" offsetFromParent="80" useReservedSpaceBelow="true" numberOfReservedSpacesBelow="3">
      <fields name="SMTMAX" alias="System Monitor Temperature MAXimum" description="This field reports the maximum temperature that has been measured by on-chip sensor. The maximum temperature (in Celcius) = (SMTMAX*503.975/4096) – 273.15." lsb="4" size="12" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
    <registers name="TEMP_MIN" alias="system monitor Temperature MAXimum" offsetFromParent="90">
      <fields name="SMTMIN" alias="System Monitor Temperature MINimum" description="This field reports the maximum temperature that has been measured by on-chip sensor. The maximum temperature (in Celcius) = (SMTMIN*503.975/4096) – 273.15." lsb="4" size="12" readWrite="false" readOnly="true">
        <possibleValues>&lt;matrox_column_delimiter>any_value=true&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
        <possibleValues>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter>&lt;matrox_column_delimiter>&lt;/matrox_column_delimiter></possibleValues>
      </fields>
    </registers>
  </registerFileAbstractNodes>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_PREFIX_PREF=&quot;&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_SUFFIX_PREF=&quot;&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_RESET_ACTIVE_LOW_PREF=&quot;true&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_RESET_ACTIVE_HIGH_PREF=&quot;false&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_RESET_ASYNCHRONOUS_PREF=&quot;false&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_RESET_SYNCHRONOUS_PREF=&quot;true&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_PACKAGE_NAME_SUFFIX_PREF=&quot;_pack&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_PORT_NAMES_INCLUDE_PREFIX_PREF=&quot;false&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_PORT_NAMES_INCLUDE_SUFFIX_PREF=&quot;false&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_PORT_NAMES_WRITE_PREF=&quot;reg_write&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_PORT_NAMES_WRITE_DATA_PREF=&quot;reg_writedata&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_PORT_NAMES_READ_PREF=&quot;reg_read&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_PORT_NAMES_READ_DATA_PREF=&quot;reg_readdata&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_PORT_NAMES_READ_DATA_VALID_PREF=&quot;reg_readdatavalid&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_PORT_NAMES_ADDRESS_PREF=&quot;reg_addr&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_PORT_NAMES_WAIT_PREF=&quot;reg_wait&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_PORT_NAMES_CLOCK_PREF=&quot;sysclk&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_PORT_NAMES_RESET_ACTIVE_LOW_PREF=&quot;resetN&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_PORT_NAMES_BYTE_ENABLE_ACTIVE_LOW_PREF=&quot;reg_beN&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_PORT_NAMES_REGISTER_FILE_PREF=&quot;regfile&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_SIGNAL_NAMES_INCLUDE_PREFIX_PREF=&quot;false&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_SIGNAL_NAMES_INCLUDE_SUFFIX_PREF=&quot;false&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_SIGNAL_NAMES_HIT_PREF=&quot;hit&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_SIGNAL_NAMES_WRITE_ENABLE_PREF=&quot;wEn&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_SIGNAL_NAMES_FULL_ADDRESS_PREF=&quot;fullAddr&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_SIGNAL_NAMES_READ_BACK_MULTIPLEXER_PREF=&quot;readBackMux&quot;</vhdlGenerationPreferences>
  <vhdlGenerationPreferences>GENERATOR_VHDL_REGISTERFILE_SIGNAL_NAMES_BYTE_ENABLE_ACTIVE_LOW_PREF=&quot;bitEnN&quot;</vhdlGenerationPreferences>
  <sdkGenerationPreferences>GENERATOR_SDK_REGISTERFILE_PREFIX_PREF=&quot;fpga&quot;</sdkGenerationPreferences>
  <sdkGenerationPreferences>GENERATOR_SDK_REGISTERFILE_SUFFIX_PREF=&quot;type&quot;</sdkGenerationPreferences>
  <sdkGenerationPreferences>GENERATOR_SDK_REGISTERFILE_TYPE_NAME_UINT64_PREF=&quot;M_UINT64&quot;</sdkGenerationPreferences>
  <sdkGenerationPreferences>GENERATOR_SDK_REGISTERFILE_TYPE_NAME_UINT32_PREF=&quot;M_UINT32&quot;</sdkGenerationPreferences>
  <sdkGenerationPreferences>GENERATOR_SDK_REGISTERFILE_TYPE_NAME_UINT16_PREF=&quot;M_UINT16&quot;</sdkGenerationPreferences>
  <sdkGenerationPreferences>GENERATOR_SDK_REGISTERFILE_TYPE_NAME_UINT8_PREF=&quot;M_UINT8&quot;</sdkGenerationPreferences>
  <sdkGenerationPreferences>GENERATOR_SDK_REGISTERFILE_DO_DEFINE_REGISTER_ADDRESSES_PREF=&quot;true&quot;</sdkGenerationPreferences>
  <sdkGenerationPreferences>GENERATOR_SDK_REGISTERFILE_ADDRESS_DEFINE_FORMAT_PREF=&quot;UPPER CASE&quot;</sdkGenerationPreferences>
  <sdkGenerationPreferences>GENERATOR_SDK_REGISTERFILE_REGISTERFILE_NAME_FORMAT_PREF=&quot;UPPER CASE&quot;</sdkGenerationPreferences>
  <sdkGenerationPreferences>GENERATOR_SDK_REGISTERFILE_REGISTERFILE_TYPE_FORMAT_PREF=&quot;UPPER CASE&quot;</sdkGenerationPreferences>
  <sdkGenerationPreferences>GENERATOR_SDK_REGISTERFILE_SECTION_NAME_FORMAT_PREF=&quot;UPPER CASE&quot;</sdkGenerationPreferences>
  <sdkGenerationPreferences>GENERATOR_SDK_REGISTERFILE_SECTION_TYPE_FORMAT_PREF=&quot;UPPER CASE&quot;</sdkGenerationPreferences>
  <sdkGenerationPreferences>GENERATOR_SDK_REGISTERFILE_REGISTER_NAME_FORMAT_PREF=&quot;UPPER CASE&quot;</sdkGenerationPreferences>
  <sdkGenerationPreferences>GENERATOR_SDK_REGISTERFILE_REGISTER_TYPE_FORMAT_PREF=&quot;UPPER CASE&quot;</sdkGenerationPreferences>
  <sdkGenerationPreferences>GENERATOR_SDK_REGISTERFILE_FIELD_NAME_FORMAT_PREF=&quot;UPPER CASE&quot;</sdkGenerationPreferences>
  <sdkGenerationPreferences>GENERATOR_SDK_REGISTERFILE_FIELD_TYPE_FORMAT_PREF=&quot;UPPER CASE&quot;</sdkGenerationPreferences>
  <sdkGenerationPreferences>GENERATOR_SDK_REGISTERFILE_FIELD_STRUCTURE_NAME_PREF=&quot;f&quot;</sdkGenerationPreferences>
  <sdkGenerationPreferences>GENERATOR_SDK_REGISTERFILE_FIELD_RESERVED_KEYWORD_PREF=&quot;rsvd&quot;</sdkGenerationPreferences>
  <sdkGenerationPreferences>GENERATOR_SDK_REGISTERFILE_REGISTERFILE_MIXED_ENDIANESS_SYSTEM_PREF=&quot;false&quot;</sdkGenerationPreferences>
</com.matrox.fdk.editor.registerfile:RegisterFile>
